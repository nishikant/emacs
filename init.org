#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/settings.el
#+filetags: :emacs:

This is an ongoing evolution of my original Emacs configuration files,
inspired by a bunch of resources I've found online. Lot of it taken
from https://github.com/Gavinok/emacs.d

#+OPTIONS: toc: include all

* My Cheat Sheet
These are helpful things that I should learn to use.

- Installation command:
#+begin_src bash :tangle no

  brew install tree-sitter
  git clone git@github.com:casouri/tree-sitter-module.git
  cd tree-sitter-module
  ./batch.sh
  mkdir ~/.emacs.d/tree-sitter-langs
  mv dist/* ~/.emacs.d/tree-sitter-langs/
  brew tap daviderestivo/emacs-head

  brew reinstall emacs-head@30 --with-dbus --with-mailutils \
       --with-cocoa --with-imagemagick --with-xwidgets --with-ctags \
       --with-modern-icon-purple --with-tree-sitter
  # Native compilation seems to screw the battery --with-native-comp
  # --with-native-full-aot --bottle-arch

#+end_src

- Install Google Inconsolata font. Download and double click
- C-i is tab
- sudo ln -sfn /opt/homebrew/opt/openjdk/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk.jdk
- C-M-k delete brackets and everything inside it
- C-u C-space move cursor to previous marked position
- C-x C-x move cursor to other end of selection
- Map CapsLock key to control
- C-x C-o delete blank lines delete-trailing-whitespace, tabify and untabify, indent-region, and so on.
- Keyboard Macros. General note, start at same position in new line
- C-x ( to start recording
- C-x ) to stop recording
- C-u 10 C-x e to execute 10 times
- C-c r search occurances in file
- C-x M-d to insert todays date
- C-u C-space to go back to previous position
- C-c left or C-c right to switch between window placement.
- C-x r w <key> and C-x r j <key> to store thin
- C-space C-x r k define a kill rectangle.
- C-t to open a terminal using shell-pop
- C-x C-m = M-x also C-c C-m just in case accidentally you use.
- C-x + to balance the split windows
- C-h backward delete char and remap help to M-h
- M-z zap-to-char
- M-/ hippie-expand for autocomplete, need (setq company-dabbrev-downcase nil) to work
- M-\ delete horizontal spaces
- C-x C-o Delete blank lines around the current line
- C-c C-j to switch terminal to line mode C-c C-k to move it back to character mod
- C-S-delete kill-whole-line
- M-r recenter-positions of cursor in current window
- C-M-a & C-M-e jump to beginning and end of paragraph/functions
- Lisp C-M-d & C-M-u move into or out of list
- C-M-f & C-M-b move back brackets or quotes
- C-M-S-v scroll-other-window-down C-M-S-n scroll-other-window up
- M-S-f/b <char> to select and <char> to insert around the selection, Add quotes around a word
- C-= select current region and it expands on multiple repeats
- C-c @ C-c/e Either hide or show the current block (hs-toggle-hiding).
- C-x C-n set-goal-column https://irreal.org/blog/?p=266
- C-M-j in ivy-mode use typed word instead of selection.
- C-c C-j terminal line mode, C-c C-k terminal char mode
- OrgMode: C-c C-q add tag
- OrgMode: C-c C-x p add a property
- OrgMode: org-id-get-create
- OrgMode: C-ca to list all todos
- OrgMode:
  - <el + tab : to add src section in org-mode
  - C-c C-n expand yasnippet

* Package Management

Setup Melpa, org, gnu and elpa packaage repositories and load
use-package to manage package configuration.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ;; ("elpa" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
                           ("nongnuelpa" . "https://elpa.nongnu.org/nongnu/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")))
  (package-initialize)

  ;; Install use-package if not installed
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (eval-when-compile (require 'use-package))
  (setq use-package-verbose t
        comp-async-report-warnings-errors nil
        comp-deferred-compilation t)

  ;; Compile the latest versions
  (setq use-package-always-ensure t)

  (setq initial-scratch-message nil)
  ;;{{{ Set up package and use-package


  (eval-after-load 'gnutls
    '(add-to-list 'gnutls-trustfiles "/etc/ssl/cert.pem"))
  (require 'bind-key)

  ;; Minimal UI
  (setq-default
   package-native-compile t
   default-frame-alist
   '((tool-bar-lines . 0)
     (menu-bar-lines . 0)
     (undecorated . t)
     (vertical-scroll-bars . nil)
     (horizontal-scroll-bars . nil)))

  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match
      that used by the user's shell.

      This is particularly useful under Mac OS X and macOS, where GUI
      apps are not started from a shell."
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))

  (set-exec-path-from-shell-PATH)

  (use-package use-package-ensure-system-package
    :ensure t)

  (cond
   ((string-equal system-type "darwin")
    (setq system-packages-use-sudo nil)
    (setq system-packages-package-manager 'brew)))

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq quelpa-update-melpa-p nil)
  (package-install 'quelpa-use-package)
  (require 'quelpa-use-package)

  (add-to-list 'load-path "~/.emacs.d/site-lisp/")
  (add-to-list 'load-path "~/.emacs.d/quelpa/build/")

  (defconst env-sys-name (system-name))
  (defconst path-home-dir (file-name-as-directory (getenv "HOME"))
    "Path to user home directory.

                In a nutshell, it's just a value of $HOME.")
  ;; Use it to debug a warning
  ;; (setq debug-on-message "quoted with ' rather than with #'")

#+end_src

* Shortcuts
All the shortcuts I use

#+begin_src emacs-lisp

  ;; Unbind unneeded keys
  (global-set-key (kbd "C-z") nil)
  (global-set-key (kbd "M-z") nil)
  (global-set-key (kbd "M-m") nil)
  (global-set-key (kbd "C-x C-z") nil)
  ;; Truncate lines
  (global-set-key (kbd "C-x C-l") #'toggle-truncate-lines)
  ;; Adjust font size like web browsers
  (global-set-key (kbd "C-=") #'text-scale-increase)
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
  ;; Move up/down paragraph
  (global-set-key (kbd "M-n") #'forward-paragraph)
  (global-set-key (kbd "M-p") #'backward-paragraph)


  ;; (global-set-key (kbd "M-" 'just-one-space))
  ;; Meta-x also mapped C-x/c C-m
  (global-set-key "\C-x\C-m" 'execute-extended-command)
  (global-set-key "\C-c\C-m" 'execute-extended-command)

  ;; Use C-h instead of backspace and M-h for help
  (global-set-key "\C-h" 'delete-backward-char)
  (define-key isearch-mode-map "\C-h" 'isearch-delete-char)
  (global-set-key "\M-i" 'help-for-help)

  (global-set-key (kbd "C-f") 'forward-word)
  (global-set-key (kbd "C-b") 'backward-word)
  (global-set-key (kbd "M-f") 'forward-char)
  (global-set-key (kbd "M-b") 'backward-char)
  (global-set-key (kbd "M-/") 'hippie-expand)

  (global-set-key (kbd "C-M-S-n") 'scroll-other-window)

  (global-set-key (kbd "C-c C-f") 'aj-toggle-fold)
  (global-set-key (kbd "C-x M-d") 'insdate-insert-current-date)

  ;; After split move cursor to the split window automatically. Default keeps the cursor
  ;; in current window
  (global-set-key "\C-x2" (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key "\C-x3" (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  (global-set-key (kbd "C-x o") 'ace-window) ;; switch window
  (global-set-key (kbd "C-M-v") 'View-scroll-half-page-forward)
  (global-set-key (kbd "C-M-n") 'View-scroll-half-page-backward)



  ;; multiple cursor & mark multiple
  (global-set-key (kbd "C-x r t") 'inline-string-rectangle)
  (global-set-key (kbd "C-<") 'mark-previous-like-this)
  (global-set-key (kbd "C->") 'mark-next-like-this)
  (global-set-key (kbd "C-M-m") 'mark-more-like-this) ; like the other two, but takes an argument (negative is previous)
  (global-set-key (kbd "C-*") 'mark-all-like-this)

  ;; (global-set-key (kbd "C-m C-m") 'mc/mark-all-dwim)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-M->") 'mc/mark-more-like-this-extended)

  (global-set-key (kbd "C-.") 'hippie-expand-no-case-fold)
  (global-set-key (kbd "C-:") 'hippie-expand-lines)
  (global-set-key (kbd "C-,") 'completion-at-point)





#+end_src

* Startup Performance

Make startup faster by reducing the frequency of garbage collection
and then use a hook to measure Emacs startup time.  For bug-hunter use
M-x bug-hunter-file and it will ask you path to tangled settings.el.

#+begin_src emacs-lisp

  ;; async enables basic async capabilities for emacs
    ;;; ASYNC
  ;; Emacs look SIGNIFICANTLY less often which is a good thing.
  ;; asynchronous bytecode compilation and various other actions makes
  (use-package async
    :ensure t
    :defer t
    :init
    (dired-async-mode 1))

  (setq async-shell-command-buffer 'new-buffer)


  (use-package savehist
    :defer 2
    :init (savehist-mode t))

  (savehist-mode 1)

  (use-package repeat
    :defer 10
    :init
    (repeat-mode +1))

  ;; Bug hunter to debug errors in init.el.
  (use-package bug-hunter)

  (setq native-comp-speed 2
        comp-speed 2)
  (setq native-comp-async-report-warnings-errors nil
        comp-async-report-warnings-errors nil)
  (setq native-comp-async-query-on-exit t
        comp-async-query-on-exit t)

  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  ;; The default is 800 kilobytes.  Measured in bytes.

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))
  ;; Increase garbage collector threshold
  (setq gc-cons-threshold (* 100 1000 1000))

  ;; Increase amount of data read from a process
  (setq read-process-output-max (* 2 1024 1024)) ;; 2 MB

  ;; change custom file location
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))

  (use-package auto-package-update
    :ensure t
    :config
    (setq auto-package-update-delete-old-versions t)
    (auto-package-update-maybe))


  ;; So Long mitigates slowness due to extremely long lines.
  ;; Currently available in Emacs master branch *only*!
  (when (fboundp 'global-so-long-mode)
    (global-so-long-mode))

  ;; Better Compilation
  (setq-default compilation-always-kill t) ; kill compilation process before starting another

  (setq-default compilation-ask-about-save nil) ; save all buffers on `compile'

  (setq-default compilation-scroll-output t)

#+end_src
* Custom Functions
Custom functions that help in OrgMode and other functionality.
#+begin_src emacs-lisp

  (defvar my/is-termux
    (string-suffix-p
     "Android" (string-trim (shell-command-to-string "uname -a")))
    "Truthy value indicating if Emacs is currently running in termux.")

  (defvar my/is-terminal
    (not window-system)
    "Truthy value indicating if Emacs is currently running in a terminal.")


  ;; Custom Functions
  (defconst clangd-p
    (or (executable-find "clangd")  ;; usually
        (executable-find "/usr/local/opt/llvm/bin/clangd"))  ;; macOS
    "Do we have clangd?")
  ;; Set up before-save hooks to format buffer and add/delete imports.
  ;; Make sure you don't have other gofmt/goimports hooks enabled.

  (defun insdate-insert-current-date (&optional omit-day-of-week-p)
    "Insert today's date using the current locale.
        With a prefix argument, the date is inserted without the day of
        the week."
    (interactive "P*")
    (insert (calendar-date-string (calendar-current-date) nil
                                  omit-day-of-week-p)))

  (defun lsp-go-install-save-hooks ()
    "Save Hooks."
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))


  (defun hrs/append-to-path (path)
    "Add a path both to the PATH variable and to Emacs' `exec-path'."
    (setenv "PATH" (concat (getenv "PATH") ":" path))
    (add-to-list 'exec-path path))

  (hrs/append-to-path "/Users/gattu/go/bin")
  (defun hrs/insert-password ()
    "Insert password."
    (interactive)
    (shell-command "pwgen 30 -1" t))

  (defun aj-toggle-fold ()
    "Toggle fold all lines larger than indentation on current line"
    (interactive)
    (let ((col 1))
      (save-excursion
        (back-to-indentation)
        (setq col (+ 1 (current-column)))
        (set-selective-display
         (if selective-display nil (or col 1))))))

#+end_src

* System Settings

Some basic settings around how emacs should look and behave. Like no
scroll bar, async support,etc.

#+begin_src emacs-lisp

  ;; Interactive opening of files image preview and more from any repl
  (use-package shx
    :ensure t
    :hook (shell-mode . shx-mode))
  (use-package discover-my-major)

  (setq-default with-editor-emacsclient-executable "emacsclient")

  (use-package keycast
    :ensure t
    :commands (keycast-mode))


  (setq treesit-extra-load-path '("~/.emacs.d/tree-sitter-langs/"))
  (use-package treesit-auto
    :demand t
    :config
    (setq treesit-auto-install t)
    (global-treesit-auto-mode))
  (use-package tree-sitter-langs
    :hook
    (tree-sitter-after-on . tree-sitter-hl-mode))

  (use-package pomm
    :ensure t
    :commands (pomm pomm-third-time)
    :init
    (setq pomm-audio-enabled t
          pomm-work-period 15
          pomm-long-break-period 10
          alert-default-style 'libnotify)
    :config
    (pomm-mode-line-mode +1))

  (use-package direnv
    :ensure t
    :config)

  (setenv "EDITOR" "emacsclient")
  (setenv "PAGER" "cat")
  (setenv "READER" "emacsclient")

  (use-package crux
    :bind
    (("C-a" . crux-move-beginning-of-line)
     ("C-x 4 t" . crux-transpose-windows)
     ("C-x K" . crux-kill-other-buffers)
     ("C-k" . crux-smart-kill-line))
    :config
    (crux-with-region-or-buffer indent-region)
    (crux-with-region-or-buffer untabify)
    (crux-with-region-or-point-to-eol kill-ring-save)
    (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))

  (setq save-abbrevs 'silently)
  (setq-default abbrev-mode t)

  (global-set-key [remap kill-whole-line] #'crux-kill-whole-line)

  (global-set-key [(shift return)] #'crux-smart-open-line)

  (setq load-prefer-newer t)
  (setq kill-whole-line t)

  ;; stretch the cursor width to character size
  (setq x-stretch-cursor t)
  ;; Create all backup files in ~/.emacs.d/
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )

  ;; Disable menu and scroll bars
  ;; (setq debug-on-error t)
  ;; (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  (set-window-scroll-bars (minibuffer-window) nil nil)

  ;; Set default frame title
  ;;  (setq frame-title-format '((:eval (projectile-project-name))))
  (setq delete-auto-save-files t)
  (setq delete-old-versions t)
  (setq global-semantic-folding-mode t)

  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; Replace selection on insert
  (delete-selection-mode 1)

  ;; Map Alt key to Meta
  (setq x-alt-keysym 'meta)
  (setq mac-command-modifier 'meta)

  ;; getting rid of the "yes or no" prompt and replace it with "y or n"
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq inhibit-splash-screen t) ;; no splash screen
  (setq-default indent-tabs-mode nil)      ;; no tabs!
  (setq fill-column 80) ;; M-q should fill at 80 chars, not 75
  (setq initial-buffer-choice "~/Documents/org-roam/work.org")

  ;; sometimes desktop is locked, ask if we want to load it.
  (setq desktop-load-locked-desktop "ask")

  ;; auto-save buffer state on close for a later time.
  ;; (desktop-save-mode 1)

  ;; Abbrevs expands abbreviations

  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/project/emacs/abbrev_defs")    ;; definitions from...

  ;; default directory
  (setq default-directory "~/")

  ;; Dont show minor modes in mode line
  (use-package diminish)

  ;; disable startup message
  (setq inhibit-startup-message t)

  ;; disable beep sound
  (setq ring-bell-function 'ignore)

  ;; disable confirmation if a file or buffer does not exist when you
  ;; use C-x C-f or C-x b
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; disable confirmation when kill a buffer with a live process
  ;; attached to it
  (setq kill-buffer-query-functions
        (remq 'process-kill-buffer-query-function
              kill-buffer-query-functions))

  ;; use trash
  (setq delete-by-moving-to-trash t)

                     ;;;;;

  (use-package emacs
    :ensure nil
    :defer nil
    :bind (("C-c w"   . fixup-whitespace)
           ("C-x C-d" . delete-pair)
           ("M-c"     . capitalize-dwim)
           ("M-u"     . upcase-dwim)
           ("M-l"     . downcase-dwim)
           ("M-z"     . zap-up-to-char)
           ("C-x S"   . shell)
           ("C-x M-t" . transpose-regions)
           ("C-;"     . negative-argument)
           ("C-M-;"   . negative-argument)
           ("M-1" . delete-other-windows)
           ("M-2" . split-window-below)
           ("M-3" . split-window-right))

    :config
    ;; Set the title of the frame to the current file - Emacs
    (setq-default frame-title-format '("%b - Emacs"))

    ;; How I like my margins
    (unless my/is-terminal
      (setq-default left-margin-width 2)
      (setq-default right-margin-width 2))

    ;; No delay when deleting pairs
    (setq-default delete-pair-blink-delay 0)
    (blink-cursor-mode -1)
    ;; change truncation indicators
    (define-fringe-bitmap 'right-curly-arrow
      [#b10000000
       #b10000000
       #b01000000
       #b01000000
       #b00100000
       #b00100000
       #b00010000
       #b00010000
       #b00001000
       #b00001000
       #b00000100
       #b00000100])
    (define-fringe-bitmap 'left-curly-arrow
      [#b00000100
       #b00000100
       #b00001000
       #b00001000
       #b00010000
       #b00010000
       #b00100000
       #b00100000
       #b01000000
       #b01000000
       #b10000000
       #b10000000])
    (unless my/is-termux
      (fringe-mode))

                     ;;;; Defaults
    ;; Handle long lines
    (setq-default bidi-paragraph-direction 'left-to-right)
    (setq-default bidi-inhibit-bpa t)
    (global-so-long-mode 1)

    (setq-default history-length 1000
                  use-dialog-box nil
                  delete-by-moving-to-trash t
                  create-lockfiles nil
                  auto-save-default nil
                  inhibit-startup-screen t
                  ring-bell-function 'ignore)

                     ;;;; UTF-8
    (prefer-coding-system 'utf-8)
                     ;;;; Remove Extra Ui
    (fset 'yes-or-no-p 'y-or-n-p)    ; don't ask to spell out "yes"
    (show-paren-mode 1)              ; Highlight parenthesis
    (setq-default x-select-enable-primary t) ; use primary as clipboard in emacs
    ;; avoid leaving a gap between the frame and the screen
    (setq-default frame-resize-pixelwise t)

    ;; Vim like scrolling
    (setq scroll-step            1
          scroll-conservatively  10000
          next-screen-context-lines 5
          ;; move by logical lines rather than visual lines (better for macros)
          line-move-visual nil)

    ;;TRAMP
    (setq tramp-default-method "ssh"
          shell-file-name "bash")         ; don't use zsh

    ;; recentf
    (customize-set-value 'recentf-make-menu-items 150)
    (customize-set-value 'recentf-make-saved-items 150))

                       ;;;;
                           ;;; Defaults
  (use-package undo-fu
    :ensure t
    :bind (("C-x u"   . undo-fu-only-undo)
           ("C-/"     . undo-fu-only-undo)
           ("C-z"     . undo-fu-only-undo)
           ("C-S-z"   . undo-fu-only-redo)
           ("C-x C-u" . undo-fu-only-redo)
           ("C-?"     . undo-fu-only-redo)))
  (use-package undo-fu-session ; Persistant undo history
    :ensure t
    :demand t
    :config (global-undo-fu-session-mode))


  (use-package use-package-chords
    :ensure t
    :config (key-chord-mode 1))
                   ;;; General Key Bindings
  (use-package crux
    :ensure t
    :bind (("C-x w v" . crux-swap-windows)
           ("C-S-o"   . crux-smart-open-line-above)
           ("C-o"     . crux-smart-open-line)
           ("C-x B"   . my/org-scratch)
           :map dired-mode-map
           ("O" . crux-open-with))
    :config
    (defun my/org-scratch ()
      (interactive)
      (let ((initial-major-mode 'org-mode))
        (crux-create-scratch-buffer))))

  (use-package simple
    :ensure nil
    :bind (("M-SPC" . cycle-spacing)))

                 ;;; Aligning Text
  (use-package align
    :ensure nil
    :defer t
    :bind ("C-x a a" . align-regexp)
    :config
    ;; Align using spaces
    (defadvice align-regexp (around align-regexp-with-spaces activate)
      (let ((indent-tabs-mode nil))
        ad-do-it)))

  ;; whole-line-ore-region use currentline if no region is selected.
  ;; primarily used to cut currentline if no region is defined
  (use-package whole-line-or-region
    :ensure t
    :diminish whole-line-or-region-global-mode
    :config
    (whole-line-or-region-global-mode 1))


  ;; switch-window gives a visual indicator when switching windows.
  (use-package ace-window)

  ;; expand-region expand selection of your region
  (use-package expand-region
    :ensure t
    :config
    (bind-key* "C-=" 'er/expand-region))

  ;; set line number
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))

  (setq ffap-require-prefix nil)
  (ffap-bindings)
  (setq ffap-require-prefix t)

  (use-package use-package-hydra)
  (use-package hydra
    :ensure t)
  (use-package which-key :config (which-key-mode))

  ;; Optional - provides snippet support.

  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (use-package yasnippet-snippets :after yasnippet)
    :hook ((prog-mode LaTeX-mode org-mode) . yas-minor-mode)
    :bind
    (:map yas-minor-mode-map ("C-c C-n" . yas-expand-from-trigger-key))
    (:map yas-keymap
          (("TAB" . smarter-yas-expand-next-field)
           ([(tab)] . smarter-yas-expand-next-field)))
    :config
    (yas-reload-all)
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))
  (yas-global-mode 1)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)


  ;; fuzzy search
  (use-package fzf)

  ;; Drag line up/down M-up, M-down, M-left, M-right comes because of this
  (use-package drag-stuff)
  (autoload 'drag-stuff "drag-stuff.el" nil t)
  (drag-stuff-global-mode 1)
  (drag-stuff-define-keys)


  ;; winner mode to handle windows config rollback
           ;;; Winner Mode
  (use-package winner
    :ensure nil
    :bind (("s-/" . winner-undo)
           ("s-?" . winner-redo))
    :config
    :init (winner-mode 1)) ; Window Managment Undo
  (setq ac-ignore-case nil)

#+end_src

** OS Specific

OS specific settings to make things work

#+begin_src emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize)
    (if (and (fboundp 'native-comp-available-p)
             (native-comp-available-p))
        (progn
          (message "Native comp is available")
          ;; Using Emacs.app/Contents/MacOS/bin since it was compiled with
          ;; ./configure --prefix="$PWD/nextstep/Emacs.app/Contents/MacOS"
          (add-to-list 'exec-path (concat invocation-directory "bin") t)
          (setenv "LIBRARY_PATH" (concat (getenv "LIBRARY_PATH")
                                         (when (getenv "LIBRARY_PATH")
                                           ":")
                                         ;; This is where Homebrew puts gcc libraries.
                                         (car (file-expand-wildcards
                                               (expand-file-name "~/homebrew/opt/gcc/lib/gcc/*")))))
          ;; Only set after LIBRARY_PATH can find gcc libraries.
          (setq comp-deferred-compilation t))
      (message "Native comp is *not* available")))
  ;; Mac OSX specific settings


#+end_src

* Beautify emacs

Themes and other configuration

#+begin_src emacs-lisp


  (display-time-mode 1)
  (display-battery-mode 1)

  ;; Set default font
  (set-face-attribute 'default nil
                      :family "Inconsolata"
                      :height 180
                      :weight 'normal
                      :width 'normal)

  (use-package aggressive-indent
    :disabled
    :diminish aggressive-indent-mode
    :hook
    (prog-mode . aggressive-indent-mode)
    (python-mode . (lambda () (aggressive-indent-mode -1))))

  ;; File beautification

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (setq-default truncate-lines 1) ;; no wordwrap
  (use-package rainbow-mode
    :diminish rainbow-mode
    )
  ;; electric-pair-mode
  (electric-pair-mode 1)
  (show-paren-mode 1)
  ;; highlight indentation
  (use-package highlight-indent-guides)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  (setq highlight-indent-guides-method 'character)
  (use-package viewer)

  ;; Use fancy lambdas
  (global-prettify-symbols-mode t)

  ;; buffernames that are foo<1>, foo<2> are hard to read. This makes them foo|dir  foo|otherdir
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'post-forward)

  ;; colorize the output of the compilation mode.
  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (toggle-read-only)
    (ansi-color-apply-on-region (point-min) (point-max))

    ;; mocha seems to output some non-standard control characters that
    ;; aren't recognized by ansi-color-apply-on-region, so we'll
    ;; manually convert these into the newlines they should be.
    (goto-char (point-min))
    (while (re-search-forward "\\[2K\\[0G" nil t)
      (progn
        (replace-match "")))
    (toggle-read-only))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)


  ;; making tooltips appear in the echo area
  (tooltip-mode 0)

  ;; highlight current line
  (global-hl-line-mode)
  (set-face-background hl-line-face "gray13")
  (set-face-attribute 'default nil :height 180)

  ;; display column number in mode line
  (column-number-mode 1)

  ;; show buffer file name in title bar
  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; Sidebar

  (use-package dired-toggle
    :defer t
    :bind (("<f3>" . #'dired-toggle)
           :map dired-mode-map
           ("q" . #'dired-toggle-quit)
           ([remap dired-find-file] . #'dired-toggle-find-file)
           ([remap dired-up-directory] . #'dired-toggle-up-directory)
           ("C-c C-u" . #'dired-toggle-up-directory))
    :config
    (setq dired-toggle-window-size 32)
    (setq dired-toggle-window-side 'left)

    ;; Optional, enable =visual-line-mode= for our narrow dired buffer:
    (add-hook 'dired-toggle-mode-hook
              (lambda () (interactive)
                (visual-line-mode 1)
                (setq-local visual-line-fringe-indicators '(nil right-curly-arrow))
                (setq-local word-wrap nil))))

  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))



    ;;; EXTRA UI
  (use-package hl-todo :ensure t :hook prog-mode)

  (use-package pulse
    ;; Highlight cursor postion after movement
    :unless my/is-terminal
    :defer t
    :init (defun pulse-line (&rest _)
            (pulse-momentary-highlight-one-line (point)))
    (dolist (command '(other-window
                       windmove-do-window-select
                       mouse-set-point
                       mouse-select-window))
      (advice-add command :after #'pulse-line)))

  (use-package separedit
    :ensure t
    ;; Key binding for modes you want edit
    ;; or simply bind ?global-map? for all.
    :bind (
           :map prog-mode-map
           ("C-c '" . separedit)
           :map minibuffer-local-map
           ("C-c '" . separedit)
           :map help-mode-map
           ("C-c '" . separedit))
    :init

    ;; Default major-mode for edit buffer
    ;; can also be other mode e.g. ?org-mode?.
    (setq separedit-default-mode 'markdown-mode)

    ;; Feature options
    ;; (setq separedit-preserve-string-indentation t)
    ;; (setq separedit-continue-fill-column t)
    ;; (setq separedit-write-file-when-execute-save t)
    ;; (setq separedit-remove-trailing-spaces-in-comment t)
    )
  ;;;; Display hex colors in emacs
  (use-package rainbow-mode :ensure t :commands (rainbow-mode))

  ;;; DIRED
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook ((dired-mode . hl-line-mode)
           (dired-mode . dired-omit-mode)
           (dired-mode . dired-hide-details-mode))
    :bind (:map dired-mode-map
                ("-" . dired-up-directory))
    :init
    (setq dired-bind-jump nil)
    :config
    (setq dired-listing-switches "-aghoA")
  ;;;;; Hide . and .. in dired
    (setq dired-omit-files
          (setq dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\..*$"))
  ;;;;; xdg-open integration
    (require 'dired-x)
    ;; prevent opening extra dired buffers
    ;; emacs 28
    (setq dired-kill-when-opening-new-dired-buffer t))

  ;;; PASS
  (use-package password-store
    :commands (password-store-copy
               password-store-insert
               password-store-generate))

  ;; Authenticte with auth-source-pass
  (use-package auth-source-pass
    :after password-store
    :config
    (auth-source-pass-enable))

  (use-package tab-bar
    :config
    (defun tab-bar-tab-name-format-comfortable (tab i)
      "Add spacing to tab bar mode"
      (propertize (concat " " (tab-bar-tab-name-format-default tab i) " ")
                  'face (funcall tab-bar-tab-face-function tab)))
    (setq tab-bar-tab-name-format-function #'tab-bar-tab-name-format-comfortable)

    (add-to-list 'tab-bar-format #'tab-bar-format-menu-bar)
    ;; TODO Determin a better way to add some of my modeline to the tab bar
    ;; (customize-set-variable 'tab-bar-format (cons #'tab-bar-format-global tab-bar-format))
    )

#+end_src

* Editing
#+begin_src emacs-lisp

  (use-package mark-multiple )
  (autoload 'inline-string-rectangle "inline-string-rectangle.el" nil t)
  (autoload 'mark-more-like-this "mark-more-like-this.el" nil t)

  ;;Iedit, a minor mode that allows editing multiple regions simultaneousy in a buffer or a region.

  (use-package iedit
    :bind ("C-x ," . iedit-mode)
    :diminish)

  ;; Conf Mode, a simple major mode for editing conf/ini/properties files.

  (use-package conf-mode
    :ensure nil
    :bind
    (:map conf-mode-map
          (("M-D" . awesome-pair-kill)
           ("SPC" . awesome-pair-space)
           ("=" . awesome-pair-equal)
           ("M-F" . awesome-pair-jump-right)
           ("M-B" . awesome-pair-jump-left))))

#+end_src

* Active Theme

Configuration for currently used theme

#+begin_src emacs-lisp

  ;; Themes
  (use-package solarized-theme)
  (load-theme 'solarized-dark t)
  (defun transparency (value)
    "VALUE Set the transparency of the frame window.  0=transparent/100=opaque."
    (interactive "nTransparency Value 0 - 100 opaque:")
    (set-frame-parameter (selected-frame) 'alpha value))

  (defun apply-theme ()
    "Apply the `solarized-light' theme and make frames just slightly transparent."
    (interactive)
    (load-theme 'solarized-dark t)
    (transparency 94))

  ;; wombat color-theme with misc face definition
  (solarized-create-theme-file-with-palette 'dark 'solarized-wombat-dark
    '("#2a2a29" "#f6f3e8"
      "#e5c06d" "#ddaa6f" "#ffb4ac" "#e5786d" "#834c98" "#a4b5e6" "#7ec98f" "#8ac6f2")
    '((custom-theme-set-faces
       theme-name
       `(default ((,class (:foreground ,(solarized-color-blend base03 base3 0.15 2) :background ,base03))))
       `(highlight ((,class (:background ,violet))))
       `(font-lock-builtin-face ((,class (:foreground ,magenta))))
       `(font-lock-constant-face ((,class (:foreground ,blue))))
       `(font-lock-comment-face ((,class (:foreground ,base00))))
       `(mode-line
         ((,class (:foreground ,base2 :background ,(solarized-color-blend base03 base3 0.85 2)))))
       `(mode-line-inactive
         ((,class (:foreground ,base00 :background ,(solarized-color-blend base03 "black" 0.85 2)))))
       `(mode-line-buffer-id ((,class (:foreground ,base3 :weight bold))))
       `(minibuffer-prompt ((,class (:foreground ,base1))))
       `(vertical-border ((,class (:foreground ,base03)))))))

  (load-theme 'solarized-dark t)

  ;; Apply theme in emacs --daemon mode
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (apply-theme))))
    (apply-theme))

  ;; use moody for a beautiful modeline

  (use-package moody
    :config
    (setq x-underline-at-descent-line t)
    (setq moody-mode-line-height 30)
    (moody-replace-mode-line-buffer-identification)
    (moody-replace-vc-mode))

  ;; hide minor modes
  (use-package minions
    :config
    (setq minions-mode-line-lighter ""
          minions-mode-line-delimiters '("" . ""))
    (minions-mode 1))

  ;; Scroll conservatively

  (setq scroll-conservatively 100)


#+end_src

* Code
** Git

Using Magit to handle all git related stuff.
#+begin_src emacs-lisp

  ;; magit
  (use-package git-timemachine)

  (use-package transient
    :ensure t ; make sure it is installed
    :demand t ; make sure it is loaded
    )

  (use-package magit-popup
    :ensure t ; make sure it is installed
    :demand t ; make sure it is loaded
    )

  (use-package magit
    :ensure t
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    :diminish auto-revert-mode)
  (global-set-key (kbd "C-x g") 'magit-status)
  ;; gitignore-mode
  (use-package git-modes
    :ensure t
    :config
    (add-hook 'gitignore-mode-hook (lambda ()
                                     (setq require-final-newline t))))


#+end_src

** Global
Coding related global settings
#+begin_src emacs-lisp

  ;; Highlight uncommitted changes

  (use-package diff-hl
    :unless my/is-termux
    :defer 5
    :hook ((magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-pre-refresh . diff-hl-magit-post-refresh))
    :init (global-diff-hl-mode)
    :config (diff-hl-flydiff-mode))

  ;; When saving a file that starts with `#!', make it executable.
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p)

  ;; to suppress -Chg in mode line
  (use-package hilit-chg
    :diminish highlight-changes-mode)

  ;;  (global-highlight-changes-mode t)


  ;; Test tab-width 2
  (setq-default tab-width 4)

  ;; Words like HelloWorld are handled by subword
  (use-package subword
    :config (global-subword-mode 1))

  (subword-mode +1)

  ;; Compilation scrolling modes

  (setq compilation-scroll-output t)
  ;;  (setq compilation-scroll-output 'first-error)

  ;; ws-butler an unobtrusive way to trim spaces from end of line
  (use-package ws-butler
    :ensure t
    :diminish ws-butler-mode
    :config
    (add-hook 'prog-mode-hook 'ws-butler-mode)
    (add-hook 'jinja2-mode-hook 'ws-butler-mode)
    (add-hook 'rst-mode-hook 'ws-butler-mode)
    (add-hook 'yaml-mode-hook 'ws-butler-mode)
    (add-hook 'protobuf-mode-hook 'ws-butler-mode))
  ( ws-butler-global-mode)

  (use-package ivy-xref
    :ensure t
    :init
    (setq xref-show-xrefs-function #'ivy-xref-show-xrefs))

      ;;; FOLDING
  (use-package hideshow
    :hook (prog-mode . hs-minor-mode)
    :bind (:map hs-minor-mode-map
                ("C-<tab>"   . hs-cycle)
                ("<backtab>" . hs-global-cycle))
    :init
    (define-advice hs-toggle-hiding (:before (&rest _) move-point-to-mouse)
      "Move point to the location of the mouse pointer."
      (mouse-set-point last-input-event))
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle (save-excursion (hs-show-all))
                          (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))
    (set-display-table-slot
     standard-display-table
     'selective-display
     (let ((face-offset (* (face-id 'font-lock-comment-face)
                           (lsh 1 22))))
       (vconcat (mapcar (lambda (c) (+ face-offset c)) " ▾")))))

  (use-package outline
    :hook ((prog-mode tex-mode) . outline-minor-mode)
    :bind (:map outline-minor-mode-map
                ("C-c u" . outline-up-heading)
                ("C-c j" . outline-forward-same-level)
                ("C-c k" . outline-backward-same-level)
                :repeat-map outline-repeatmap
                ("u" . outline-up-heading)
                ("j" . outline-forward-same-level)
                ("k" . outline-backward-same-level))
    :config
    ;; Outline Minor Mode
    (defun set-vim-foldmarker (fmr)
      "Set Vim-type foldmarkers for the current buffer"
      (interactive "sSet local Vim foldmarker: ")
      (if (equal fmr "")
          (message "Abort")
        (setq fmr (regexp-quote fmr))
        (set (make-local-variable 'outline-regexp)
             (concat ".*" fmr "\\([0-9]+\\)"))
        (set (make-local-variable 'outline-level)
             `(lambda ()
                (save-excursion
                  (save-match-data
                    (re-search-forward ,(concat fmr "\\([0-9]+\\)") nil t)
                    (string-to-number (match-string 1))))))))
    ;; Vim Like Folding
    (set-vim-foldmarker "{{{"))


  (defun puni-kill-line ()
    "Kill a line forward while keeping expressions balanced."
    (interactive)
    (puni-soft-delete-by-move
     ;; FUNC: `puni-soft-delete-by-move` softly deletes the region from
     ;; cursor to the position after calling FUNC.
     (lambda ()
       (if (eolp) (forward-char) (end-of-line)))
     ;; STRICT-SEXP: More on this later.
     'strict-sexp
     ;; STYLE: More on this later.
     'beyond
     ;; KILL: Save deleted region to kill-ring if non-nil.
     'kill
     ;; FAIL-ACTION argument is not used here.
     ))
  ;;;; Setup Folding For Programming
  (use-package puni
    :hook (((calc-mode term-mode vterm-mode) . puni-disable-puni-mode)
           (puni-mode  . electric-pair-mode))
    :bind (("C-c s" . puni-mode)
           :map puni-mode-map
           ("C-c DEL" . flyspell-correct-previous)
           ("M-e"   . puni-end-of-sexp)
           ("M-a"   . puni-beginning-of-sexp)
           ("C-M-f" . puni-forward-sexp-or-up-list)
           ("C-M-b" . puni-backward-sexp-or-up-list)
           ("C-)"   . puni-slurp-forward)
           ("C-0"   . puni-slurp-forward)
           ("C-}"   . puni-barf-forward)
           ("C-9"   . puni-slurp-backward)
           ("C-{"   . puni-barf-backward)
           ("C-("   . puni-slurp-backward)
           ("M-("   . puni-wrap-round)
           ;; ("C-M-j" . sp-join-sexp)
           ("C-M-t" . puni-transpose)
           ;; ("C-M-k" . puni-kill-thing-at-point)
           ("C-M-?" . puni-convolute)
           ("C-k"   . crux-smart-kill-line)
           ("M-k"   . kill-sexp)
           ;; ("S-SPC" . puni-expand-region)
           ("M-C"   . puni-clone-thing-at-point)
           ("C-M-z" . puni-squeeze)
           ("C-M-z" . puni-squeeze)
           ("M-<backspace>" . backward-kill-word)
           ("C-w" . kill-region))
    :init
    (puni-global-mode t)
    :config
    (defun puni-kill-thing-at-point (&optional arg)
      "Kill the next puni based thing at point"
      (interactive)
      (unless buffer-read-only
        (puni-expand-region)
        (kill-region (region-beginning) (region-end))))
    (defun puni-clone-thing-at-point (&optional arg)
      "Clone the next puni based thing at point"
      (interactive)
      (save-excursion
        (puni-expand-region)
        (kill-ring-save (region-beginning) (region-end)))
      (yank)
      (default-indent-new-line))
     ;;;; Better Killing And Yanking
    (setq rectangle-mark-mode nil)
    (setq *last-kill-was-rectangle* rectangle-mark-mode)

    (defun remember-last-kill-type (&rest d)
      (setq *last-kill-was-rectangle* rectangle-mark-mode))

    ;; (advice-add 'kill-region :before #'remember-last-kill-type)
    ;; (advice-add 'kill-ring-save :before #'remember-last-kill-type)
    ;; (advice-add 'kill-rectangle :before #'remember-last-kill-type)

    (defun my/kill-region (BEG END &optional REGION)
      (interactive (list (mark) (point) 'region))
      (cond
       (rectangle-mark-mode (kill-rectangle
                             (region-beginning) (region-end)))
       (mark-active (kill-region
                     (region-beginning) (region-end)))
       (t (backward-kill-sexp 1))))

    (defun my/yank (&optional arg) (interactive)
           (if *last-kill-was-rectangle*
               (yank-rectangle)
             (yank arg)))

    ;; Avoid terminal binding conflict
    (unless my/is-termux
      (bind-key (kbd "M-[") #'puni-splice 'puni-mode-map)
      (bind-key (kbd "M-]") #'puni-split 'puni-mode-map)))


  ;; Automatic code formatting
  (use-package apheleia
    :ensure t
    :config
    (apheleia-global-mode +1)
    ;; Setup auto formatting for purescript
    (push '(purs-tidy "purs-tidy" "format") apheleia-formatters)
    (setf (alist-get 'purescript-mode apheleia-mode-alist) '(purs-tidy))
    ;; Setup auto formatting for haskell
    (push '(fourmolu "fourmolu") apheleia-formatters)
    (setf (alist-get 'haskell-mode apheleia-mode-alist) '(fourmolu)))
#+end_src
*** Completion
Using Counsel and ivy to code completion

#+begin_src emacs-lisp

  ;; Counsel

  (setq recentf-max-saved-items 100)

  (global-set-key "\C-cq" #'bury-buffer)

  (use-package flx
    :after ivy)



  (use-package ivy-posframe
    :init
    (setq ivy-posframe-display-functions-alist
          '((t . ivy-posframe-display-at-frame-center)))
    :config
    (ivy-posframe-mode 1))


#+end_src

*** LSP Mode
LSP mode settings. Custom language settings also included here.

#+begin_src emacs-lisp


              ;;; LSP
  ;; Should boost performance with lsp
  ;; https://emacs-lsp.github.io/lsp-mode/page/performance/

  (require 'cc-mode)
  (use-package lsp-mode
    :defer t
    :commands (lsp lsp-deferred)
    :bind (("C-c ," . help-at-pt-buffer)
           ("C-c d" . lsp-describe-thing-at-point)
           ("C-c e n" . flymake-goto-next-error)
           ("C-c e p" . flymake-goto-prev-error)
           ("C-c e r" . lsp-find-references)
           ("C-c e R" . lsp-rename)
           ("C-c e i" . lsp-find-implementation)
           ("C-c e t" . lsp-find-type-definition)
           )

    :ensure-system-package ((node)
                            (typescript-language-server . "npm install -g typescript-language-server")
                            (javascript-typescript-langserver . "npm install -g javascript-typescript-langserver")
                            (bash-language-server . "npm install -g bash-language-server")
                            (python-lsp-server . "pip3 install python-lsp-server[yapf]")
                            (jedi . "pip3 install jedi")
                            (tsc . "npm install -g typescript")
                            (sqls . "go install github.com/lighttiger2505/sqls@latest")
                            (golang)
                            (pylib . "pip3 install pandas matplotlib sklearn torch ipykernel tensorflow torchvision --upgrade")
                            (gopls . "GOBIN=/Users/gattu/go/bin GO111MODULE=on go install golang.org/x/tools/gopls@latest"))
    :init

    ;; Increase the amount of data emacs reads from processes
    (setq read-process-output-max (* 1024 1024))
    (setq lsp-clients-clangd-args '("--header-insertion-decorators=0"
                                    "--clang-tidy"
                                    "--enable-config"))
    ;; General lsp-mode settings
    (setq lsp-completion-provider :capf
          lsp-completion-no-cache t
          lsp-completion-enable t
          lsp-enable-snippet t
          lsp-enable-on-type-formatting nil
          lsp-enable-indentation nil
          lsp-diagnostics-provider :flymake
          lsp-keymap-prefix "C-x L")

    (defun my/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(flex))) ;; Configure flex
    ;; to enable the lenses
    (add-hook 'lsp-mode-hook #'lsp-lens-mode)
    (add-hook 'lsp-completion-mode-hook
              (lambda ()
                (setf (alist-get 'lsp-capf completion-category-defaults)
                      '((styles . (orderless flex))))))
    :config
    (defun help-at-pt-buffer ()
      (interactive)
      (let ((help (help-at-pt-kbd-string))
            (h-at-p-buf "*Help At Point*"))
        (if help
            (progn (with-current-buffer (get-buffer-create h-at-p-buf)
                     (view-mode -1)
                     (erase-buffer) (insert (format "%s" (substitute-command-keys help)))
                     (view-mode +1))
                   (switch-to-buffer-other-window h-at-p-buf))
          (if (not arg) (message "No local help at point")))))
    (setq lsp-modeline-diagnostics-scope :workspace)
    (setq lsp-headerline-breadcrumb-enable t)
    (setq lsp-enable-snippet t)
    (setq lsp-file-watch-threshold 4000)
    (setq lsp-headerline-breadcrumb-mode t)

    (setq lsp-semantic-highlighting 'immediate)
    (setq lsp-clients-go-library-directories '("/Users/gattu/project/go/"))
    (setq lsp-enable-semantic-highlighting t)
    (lsp-register-custom-settings
     '(("gopls.completeUnimported" t t)
       ("gopls.staticcheck" t t)))
    :hook
    (lsp-completion-mode . my/lsp-mode-setup-completion))

  (use-package lsp-languages
    :no-require t :ensure nil
    :hook ((c-mode          . lsp-deferred)
           (c++-mode        . lsp-deferred)
           (typescript-mode . lsp-deferred)
           (purescript-mode . lsp-deferred)
           (js-mode         . lsp-deferred)
           (python-mode . lsp-deferred)
           (groovy-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (java-mode . lsp-deferred)
           (csharp-mode . lsp-deferred)
           (sh-mode . lsp-deferred)
           (yaml-mode . lsp-deferred)
           (cfn-yaml-mode . lsp-deferred)
           (kotlin-mode . lsp-deferred)
           (web-mode . lsp-deferred)
           ((js2-mode rjsx-mode) . lsp-deferred)
           (javascript-mode . lsp-deferred)))

  ;; Optional - provides fancier overlays.


  (use-package
    lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :after flycheck

    :bind (:map lsp-mode-map
                ("C-h" . lsp-ui-doc-glance)
                ("C-c f" . lsp-format-buffer)
                ("C-<return>" . lsp-ui-sideline-apply-code-actions)
                ("M-p" . lsp-ui-find-prev-reference)
                ("M-n" . lsp-ui-find-next-reference)
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references)
                ("C-c u" . lsp-ui-imenu)
                )
    :custom (lsp-ui-sideline-diagnostic-max-lines 3)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-doc-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-show-symbol nil)
    (lsp-ui-sideline-actions-kind-regex ".*")
    (lsp-clients-clangd-args '("--compile-commands-dir=build"
                               "--header-insertion=never")))

#+end_src

#+RESULTS:

*** DAP Mode

Debug settings for various languages

#+begin_src emacs-lisp


  ;; DAP mode
  (use-package dap-mode
    :diminish dap-mode
    :ensure t
    :defer t
    :after (lsp-mode)
    :bind (:map dap-mode-map
                ("C-x D D" . dap-debug)
                ("C-x D d" . dap-debug-last))
    :init (defun my/dap-cpp-setup ()
            (require 'dap-gdb-lldb)
            (dap-gdb-lldb-setup))
    :config
    (my/dap-cpp-setup)
    (setq dap-auto-configure-features '(sessions locals controls tooltip))
    (dap-mode 1)
    (dap-auto-configure-mode)
    (setq dap-print-io t)
    (require 'dap-hydra)
    (require 'dap-java)
    (require 'dap-python)
    (require 'dap-lldb)
    (require 'dap-firefox)
    (require 'dap-chrome)
    (require 'dap-node)
    (require 'dap-gdb-lldb)
    (require 'dap-go)
    (dap-go-setup)
    (dap-chrome-setup)
    (dap-firefox-setup)
    (dap-node-setup)
    (use-package dap-ui
      :defer t
      :ensure nil
      :config
      (dap-ui-mode 1)))
  (use-package dap-java
    :defer t
    :ensure nil)
  (use-package lsp-java
    :defer t
    :config
    (add-hook 'java-mode-hook 'lsp))
  (setq lsp-java-vmargs '("-cp" ".:/Users/gattu/project/java/algs4.jars:/Library/Java/Extensions"))

  ;; Rust template
  (require 'dap-mode)
  (dap-register-debug-template "Rust::GDB Run Configuration"
                               (list :type "gdb"
                                     :request "launch"
                                     :name "GDB::Run"
                                     :gdbpath "rust-gdb"
                                     :target nil
                                     :cwd nil))

  ;; JavaRunner
  (dap-register-debug-template "JavaRunner"
                               (list :type "java"
                                     :request "launch"
                                     :args ""
                                     :vmArgs "-ea -Dmyapp.instance.name=myapp_1"
                                     :projectName "myapp"
                                     :mainClass "com.domain.AppRunner"
                                     :env '(("DEV" . "1"))))

  ;; Python template

  (dap-register-debug-template "My App"
                               (list :type "python"
                                     :args "-i"
                                     :cwd nil
                                     :env '(("DEBUG" . "1"))
                                     :target-module (expand-file-name "~/src/myapp/.env/bin/myapp")
                                     :request "launch"
                                     :name "My App"))

  (setq dap-auto-configure-features '(sessions locals controls tooltip))
  ;; The modes above are optional

  ;; enables mouse hover support
  (dap-tooltip-mode 1)
  ;; use tooltips for mouse hover
  ;; if it is not enabled `dap-mode' will use the minibuffer.
  (tooltip-mode 1)
  ;; displays floating panel with debug buttons
  ;; requies emacs 26+
  (dap-ui-controls-mode 1)

#+end_src

#+begin_src emacs-lisp

;;Don't use strange separate control-window.
(customize-set-variable 'ediff-window-setup-function 'ediff-setup-windows-plain)

;;Side by side comparison is easier than vertical split
;;(tob-bottom-stacked) window
(customize-set-variable 'ediff-split-window-function 'split-window-horizontally)

;; ;; To ignore white space. Note: not good for Python
;; (csetq ediff-diff-options "-w")

;; reset the window configuration after ediff is done
;;(winner-mode)
;;(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

#+end_src** Ediff

See diff of two files

** Bash/Shell
Shell script settings and opening a terminal using shell-pop
#+begin_src emacs-lisp

  ;; sh

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "bash-language-server")
                    :major-modes '(sh-mode)
                    :server-id 'bash-language-server))

  (add-to-list 'lsp-enabled-clients 'bash-ls)
  (add-hook 'sh-mode-hook
            (lambda ()
              (setq sh-basic-offset 2
                    sh-indentation 2)))

  (use-package shell-pop
    :bind ("C-t" . shell-pop)
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/bin/bash")
    (setq shell-pop-universal-key "C-t")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))


#+end_src

** C, C++
cc-mode for working c, c++

#+begin_src emacs-lisp

  (add-to-list 'lsp-enabled-clients 'clangd)
  ;; cc-mode
  (use-package cc-mode
    :config
    (add-hook 'c-mode-common-hook
              (lambda ()
                (local-set-key (kbd "C-M-h") 'backward-kill-word)
                (local-set-key (kbd "C-c h") 'c-mark-function))))

  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
  (with-eval-after-load 'lsp-mode
    (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
    (require 'dap-cpptools)
    (yas-global-mode))

  ;; lsp-mode for c++
  (use-package ccls
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
  (setq ccls-initialization-options '(:index (:comments 2) :completion (:detailedLabel t)))
  (setq ccls-executable "/usr/local/bin/ccls")
  ;; (setq ccls-args '("--log-file=/tmp/ccls.log"))


#+end_src

** Clojure
#+begin_src emacs-lisp


  ;; Clojure

  (use-package cider
    :defer t)


#+end_src

** Code completion

Use Ivy frame work for code completion interface

#+begin_src emacs-lisp

  (use-package auto-complete)

  (ac-config-default)
  (add-to-list 'ac-modes 'org-mode)
  (ac-set-trigger-key "TAB")

  ;; Vertico provides a performant and minimalistic vertical completion
  ;; UI based on the default completion system
  (use-package vertico
    :init
    ;; Enable vertico using the vertico-flat-mode
    (require 'vertico-directory)
    (add-hook 'rfn-eshadow-update-overlay-hook #'vertico-directory-tidy)


    ;; asynchronous fuzzy finder for emacs
    (use-package affe
      :bind (("M-s M-f" . affe-find)
             ("M-s f"   . affe-find)
             ;; ("M-s M-g" . affe-grep)
             ;; ("M-s g"   . affe-grep)
             )
      :config
      (defun affe-orderless-regexp-compiler (input _type _ignorecase)
        (setq input (orderless-pattern-compiler input))
        (cons input (lambda (str) (orderless--highlight input str))))
      (setq affe-regexp-compiler #'affe-orderless-regexp-compiler)
      ;; Manual preview key for `affe-grep'
      (consult-customize affe-find affe-grep :preview-key (kbd "M-.")))

    ;;  Marginalia are marks or annotations placed at the margin of the
    ;;  page of a book or in this case helpful colorful annotations placed
    ;;  at the margin of the minibuffer for your completion candidates
    (use-package marginalia
      :custom
      (marginalia-annotators
       '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (marginalia-mode))
    (vertico-mode t)
    :config
    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))


               ;;;; Extra Completion Functions
  (use-package consult
    :after vertico
    :bind (("C-x b"       . consult-buffer)
           ("C-x C-k C-k" . consult-kmacro)
           ("M-y"         . consult-yank-pop)
           ("M-g g"       . consult-goto-line)
           ("M-g M-g"     . consult-goto-line)
           ("M-g f"       . consult-flymake)
           ("M-g i"       . consult-imenu)
           ("M-s l"       . consult-line)
           ("M-s L"       . consult-line-multi)
           ("M-s u"       . consult-focus-lines)
           ("M-s g"       . consult-ripgrep)
           ("M-s M-g"     . consult-ripgrep)
           ("C-x C-SPC"   . consult-global-mark)
           ("C-x M-:"     . consult-complex-command)
           ;; ("C-c n"       . consult-org-agenda)
           ("C-c m"       . my/notegrep)
           :map help-map
           ("a" . consult-apropos)
           :map minibuffer-local-map
           ("M-r" . cape-history))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    :config
    (defun my/notegrep ()
      "Use interactive grepping to search my notes"
      (interactive)
      (consult-ripgrep org-directory))
    (recentf-mode t))
  (use-package consult-dir
    :ensure t
    :bind (("C-x C-j" . consult-dir)
           ;; :map minibuffer-local-completion-map
           :map vertico-map
           ("C-x C-j" . consult-dir)))

  ;; https://www.lesbonscomptes.com/recoll/pages/index-recoll.html
  (use-package consult-recoll
    :bind (("M-s r" . counsel-recoll)
           ("C-c I" . recoll-index))
    :init
    (setq consult-recoll-inline-snippets t)
    :config
    (defun recoll-index (&optional arg) (interactive)
           (start-process-shell-command "recollindex"
                                        "*recoll-index-process*"
                                        "recollindex")))
  ;; Embark makes it easy to choose a command to run based on what is near point
  (use-package embark
    :ensure t
    :bind
    ;; pick some comfortable binding
    (("C-="                     . embark-act)
     ([remap describe-bindings] . embark-bindings)
     :map embark-file-map
     ("C-d"                     . dragon-drop)
     :map embark-defun-map
     ("M-t" . chatgpt-gen-tests-for-region)
     :map embark-general-map
     ("M-c" . chatgpt-prompt)
     :map embark-region-map
     ("?"   . chatgpt-explain-region)
     ("M-f" . chatgpt-fix-region)
     ("M-f" . chatgpt-fix-region))
    :custom
    (embark-indicators
     '(embark-highlight-indicator
       embark-isearch-highlight-indicator
       embark-minimal-indicator))
    :init
    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)
    (setq embark-prompter 'embark-completing-read-prompter)
    :config
    (defun search-in-source-graph (text))
    (defun dragon-drop (file)
      (start-process-shell-command "dragon-drop" nil
                                   (concat "dragon-drop " file))))

  ;; Consult users will also want the embark-consult package.
  ;; Consult provides search and navigation commands based on the Emacs completion function

  (use-package embark-consult
    :ensure t
    :after (:all embark consult)
    :demand t
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))

  ;; For uploading files
  (use-package 0x0
    :ensure t
    :after embark
    :bind (
           :map embark-file-map
           ("U"    . 0x0-upload-file)
           :map embark-region-map
           ("U"    . 0x0-dwim))
    :commands (0x0-dwim 0x0-upload-file))

  (use-package
    corfu
    ;; Optional customizations
    :custom
    (corfu-cycle t) ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t) ;; Enable auto completion
    ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
    (corfu-quit-at-boundary 'separator) ;; Automatically quit at word boundary
    (corfu-quit-no-match 'separator) ;; Automatically quit if there is no match
    (corfu-scroll-margin 5) ;; Use scroll margin
    ;; (corfu-preview-current nil)    ;; Do not preview current candidate
    (corfu-auto-delay 0.0)
    (corfu-auto-prefix 1)
    (corfu-on-exact-match 'quit)

    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; You may want to enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.
    ;; This is recommended since dabbrev can be used globally (M-/).
    :init (global-corfu-mode)

    ;; :config
    ;; (define-key corfu-map (kbd "M-p") #'corfu-doc-scroll-down) ;; corfu-next
    ;; (define-key corfu-map (kbd "M-n") #'corfu-doc-scroll-up)  ;; corfu-previous

    ;; Quit on save
    :hook (before-save-hook . corfu-quit)
    :load-path "straight/build/corfu/extensions"
    :config
    (require 'corfu-history)
    (corfu-history-mode 1)
    (savehist-mode 1)
    (add-to-list 'savehist-additional-variables 'corfu-history)
    ;; (corfu-mode-hook . corfu-doc-mode)
    )

  (defun add-cape-completions ()
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;; (add-to-list 'completion-at-point-functions
    ;;              #'cape-keyword)
    ;; (add-to-list 'completion-at-point-functions
    ;;              #'cape-symbol)
    )

  ;; Add extensions
  (use-package
    cape
    ;; Bind dedicated completion commands
    ;; :bind (("C-c p p" . completion-at-point) ;; capf
    ;;        ("C-c p t" . complete-tag)        ;; etags
    ;;        ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
    ;;        ("C-c p f" . cape-file)
    ;;        ("C-c p k" . cape-keyword)
    ;;        ("C-c p s" . cape-symbol)
    ;;        ("C-c p a" . cape-abbrev)
    ;;        ("C-c p i" . cape-ispell)
    ;;        ("C-c p l" . cape-line)
    ;;        ("C-c p w" . cape-dict)
    ;;        ("C-c p \\" . cape-tex)
    ;;        ("C-c p _" . cape-tex)
    ;;        ("C-c p ^" . cape-tex)
    ;;        ("C-c p &" . cape-sgml)
    ;;        ("C-c p r" . cape-rfc1345))
    :hook (corfu-mode . add-cape-completions))
  ;; A few more useful configurations...
  (setq completion-cycle-threshold 3)

  ;; Optionally use the `orderless' completion style.
  (use-package
    orderless
    :init
    ;; Tune the global completion style settings to your liking!
    ;; This affects the minibuffer and non-lsp completion at point.
    (setq
     completion-styles '(orderless partial-completion basic)
     completion-category-defaults nil
     completion-category-overrides nil))

  ;; ;; Use dabbrev with Corfu!
  ;; (use-package dabbrev
  ;;   ;; Swap M-/ and C-M-/
  ;;   :bind (("M-/" . dabbrev-completion)
  ;;          ("C-M-/" . dabbrev-expand)))

  ;; A few more useful configurations...
  (use-package
    emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)
    )

  ;; Enable vertico
  (use-package
    vertico
    :init (vertico-mode)
    :bind (:map vertico-map ("C-j" . vertico-exit-input))

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    )

  ;; Persist history over Emacs restarts. Vertico sorts by history position.
  (use-package savehist :init (savehist-mode))

  ;; A few more useful configurations...
  (use-package
    emacs
    :init
    ;; Add prompt indicator to `completing-read-multiple'.
    ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
    (defun crm-indicator (args)
      (cons
       (format "[CRM%s] %s"
               (replace-regexp-in-string
                "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" "" crm-separator)
               (car args))
       (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

    ;; Do not allow the cursor in the minibuffer prompt
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

    ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
    ;; Vertico commands are hidden in normal buffers.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable recursive minibuffers
    (setq enable-recursive-minibuffers t))

  (setq-local completion-at-point-functions
              (list (cape-capf-buster #'some-caching-capf)))

  (use-package cape-yasnippet
    :ensure nil
    :quelpa (cape-yasnippet :fetcher github :repo "elken/cape-yasnippet")
    :after yasnippet
    :hook ((prog-mode . yas-setup-capf)
           (text-mode . yas-setup-capf)
           (lsp-mode  . yas-setup-capf)
           (sly-mode  . yas-setup-capf))
    :bind (("C-c y" . cape-yasnippet)
           ("M-+"   . yas-insert-snippet))
    :config
    (defun yas-setup-capf ()
      (setq-local completion-at-point-functions
                  (cons 'cape-yasnippet
                        completion-at-point-functions)))
    (push 'cape-yasnippet completion-at-point-functions))

  (use-package smart-tab)
  (require 'smart-tab)
  (global-smart-tab-mode 1)

  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers
          try-expand-dabbrev-from-kill
          try-complete-lisp-symbol-partially
          try-complete-lisp-symbol
          try-complete-file-name-partially
          try-complete-file-name
          try-expand-all-abbrevs
          try-expand-list
          try-expand-line))

#+end_src

** Csharp
#+begin_src emacs-lisp


  (use-package tree-sitter)
  (use-package tree-sitter-langs)

  (require 'tree-sitter)
  (require 'tree-sitter-hl)
  (require 'tree-sitter-langs)
  (require 'tree-sitter-debug)
  (require 'tree-sitter-query)

  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode))
  (add-to-list 'lsp-enabled-clients 'csharp)

#+end_src

** CSS Sass and Less

Configuration for CSS and related techs. Most of the stuff borrowed from https://readingworldmagazine.com/emacs/2021-01-29-emacs-css-and-scss/

#+begin_src emacs-lisp

  ;; css sort
  (use-package com-css-sort
    :commands (com-css-sort com-css-sort-attributes-block com-css-sort-attributes-document)
    :config
    (setq com-css-sort-sort-type 'alphabetic-sort)
    );end com-css-sort

  ;; css-eldoc
  (use-package css-eldoc
    :commands turn-on-css-eldoc
    ;;add a hook if you want always to see the selector options in the minibuffer
    :config
    (add-hook 'css-mode-hook 'turn-on-css-eldoc)
    (add-hook 'scss-mode-hook 'turn-on-css-eldoc)
    )                                     ;end css-eldoc

  (use-package origami
    :commands (origami-toggle-node origami-mode)
    :config
    (add-to-list 'origami-parser-alist '(scss-markers   . ,(origami-markers-parser "/*/" "/*/")))
    (add-hook 'scss-mode-hook
              (lambda () (setq-local origami-fold-style 'scss-markers)))
    :bind
    ("C-c i" . origami-toggle-node)
    );end origami mode

  (add-hook 'css-mode-hook 'emmet-mode)
  ;;sass

  (use-package scss-mode
                                          ;:after(web-mode css-mode scss-mode)
    :commands (scss-mode scss-compile css-mode web-mode)
    :mode ("\\.scss" . scss-mode)
    :init

    :config
    (require 'scss-mode)
    (setq scss-compile-at-save 'nil)
    ;;(autoload 'scss-mode "scss-mode")

    ;;hook

    (use-package flymake-sass)
    (require 'flymake-sass)
    :hook
    (scss-mode . (lambda ()
                   (progn
                     (highlight-indent-guides-mode -1)
                     (emmet-mode 1)
                     (setq emmet-preview-default -1)
                     (flymake-sass-load)
                     )));end hook
    );end scss-mode
  ;;use scss-mode

  ;; CSS Sass and Less
  (use-package css-mode
    :config
    (setq css-indent-offset 2))

  (use-package scss-mode
    :config
    (setq scss-compile-at-save nil))

  (use-package less-css-mode)

#+end_src

** Docker
Dockerfile and docker-compose related settings
#+begin_src emacs-lisp

  ;; dockerfile-mode
  (use-package dockerfile-mode
    :ensure t)

  (use-package docker)
  ;; (straight-use-package '(dockerfile-mode :type git :repo "fredeeb/dockerfile-mode"))
  (setq dockerfile-use-buildkit t)
  (use-package docker-compose-mode
    :mode ("docker-compose.yml\\'" . docker-compose-mode))

  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview)
    :config
    (setq kubernetes-poll-frequency 3600
          kubernetes-redraw-frequency 3600))

#+end_src

** Elixir
Elixir is a dynamic functional language based of Erlang
#+begin_src emacs-lisp

  ;; elixir
  (use-package elixir-mode
    :ensure t)


#+end_src

** FlyCheck
Use fly check to check syntax
#+begin_src emacs-lisp


  (use-package flymake
    :defer 10
    :bind (("M-g d"   . flymake-show-buffer-diagnostics)
           ("M-g M-d" . flymake-show-project-diagnostics)
           ("M-g M-n" . flymake-goto-next-error)
           ("M-g M-p" . flymake-goto-prev-error)
           :repeat-map flymake-repeatmap
           ("p" . flymake-goto-prev-error)
           ("n" . flymake-goto-next-error)
           :map flymake-diagnostics-buffer-mode-map
           ("?" . flymake-show-diagnostic-here)
           :map flymake-project-diagnostics-mode-map
           ("?" . flymake-show-diagnostic-here))
    :hook (prog-mode . (lambda () (flymake-mode t)))
    :config
    (defun flymake-show-diagnostic-here (pos &optional other-window)
      "Show the full diagnostic of this error.
  Used to see multiline flymake errors"
      (interactive (list (point) t))
      (let* ((id (or (tabulated-list-get-id pos)
                     (user-error "Nothing at point")))
             (text (flymake-diagnostic-text (plist-get id :diagnostic))))
        (message text)))
    (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))
  (use-package imenu
    :ensure nil
    :custom
    (imenu-auto-rescan t)
    ;; (imenu-max-items nil)

    )

  ;; flycheck

  (use-package flycheck-pos-tip
    :defines flycheck-pos-tip-timeout
    :hook (flycheck-mode . flycheck-pos-tip-mode)
    :custom (flycheck-pos-tip-timeout 30))

  (use-package flycheck
    :defer t
    :diminish
    :hook (after-init . global-flycheck-mode)
    :commands (flycheck-add-mode)
    :custom
    (flycheck-global-modes
     '(not outline-mode diff-mode shell-mode eshell-mode term-mode))
    (flycheck-emacs-lisp-load-path 'inherit)
    (flycheck-indication-mode (if (display-graphic-p) 'right-fringe 'right-margin))
    :init
    (if (display-graphic-p)
        (use-package flycheck-posframe
          :custom-face
          (flycheck-posframe-face ((t (:foreground ,(face-foreground 'success)))))
          (flycheck-posframe-info-face ((t (:foreground ,(face-foreground 'success)))))
          :hook (flycheck-mode . flycheck-posframe-mode)
          :custom
          (flycheck-posframe-position 'window-bottom-left-corner)
          (flycheck-posframe-border-width 3)
          )
      )
    :config

    (setq flycheck-check-syntax-automatically '(mode-enabled save))
    (setq compilation-auto-jump-to-first-error t)
    (add-hook 'python-mode-hook 'flycheck-mode)
    (add-hook 'go-mode-hook 'flycheck-mode)
    (add-hook 'sh-mode-hook 'flycheck-mode)
    (add-hook 'rst-mode-hook 'flycheck-mode)
    (add-hook 'js2-mode-hook 'flycheck-mode)
    (add-hook 'web-mode-hook 'flycheck-mode)
    (add-hook 'elpy-mode-hook 'flycheck-mode)
    (use-package flycheck-popup-tip
      :hook (flycheck-mode . flycheck-popup-tip-mode))
    (when (fboundp 'define-fringe-bitmap)
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [16 48 112 240 112 48 16] nil nil 'center))
    (when (executable-find "vale")
      (use-package flycheck-vale
        :config
        (flycheck-vale-setup)
        (flycheck-add-mode 'vale 'latex-mode))))

  (use-package flyspell
    :ensure nil
    :diminish
    :if (executable-find "aspell")
    :hook (((text-mode outline-mode latex-mode org-mode markdown-mode) . flyspell-mode))
    :custom
    (flyspell-issue-message-flag nil)
    (ispell-program-name "aspell")
    (ispell-extra-args
     '("--sug-mode=ultra" "--lang=en_US" "--camel-case"))
    :config
    (use-package flyspell-correct-ivy
      :after ivy
      :bind
      (:map flyspell-mode-map
            ([remap flyspell-correct-word-before-point] . flyspell-correct-wrapper)
            ("C-." . flyspell-correct-wrapper))
      :custom (flyspell-correct-interface #'flyspell-correct-ivy)))

#+end_src

** Golang
Golang related configs

#+begin_src emacs-lisp

  (setenv "GO111MODULE" "on")
  ;; go-mode
  (add-to-list 'lsp-enabled-clients 'gopls)

  (use-package go-errcheck)
  (use-package godoctor)
  (use-package go-mode
    :config

    (define-key go-mode-map (kbd "C-c c") 'go-run))

  ;; use golangci

  (use-package flycheck-golangci-lint
    :ensure t
    :hook (go-mode . flycheck-golangci-lint-setup))

  ;; (add-hook 'before-save-hook 'gofmt-before-save)

  (use-package go-projectile)
  (use-package gotest)

  ;; TBR

  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)
  (add-hook 'go-mode-hook #'yas-minor-mode)
  (lsp-register-custom-settings
   '(("gopls.completeUnimported" t t)
     ("gopls.staticcheck" t t)))

  ;; add go yasnippet
  (use-package go-snippets)

#+end_src

** Graphics

Epaint
#+begin_src emacs-lisp
  (use-package epaint
    :if (display-graphic-p)
    :load-path (lambda () (expand-file-name "site-elisp/epaint" user-emacs-directory))
    :commands (epaint)
    :init
    (with-eval-after-load (quote epaint-context)
      (unless (boundp (quote cl-struct-epaint-drawable))
        (defvar cl-struct-epaint-drawable (quote epaint-drawable)))
      (unless (boundp (quote cl-struct-epaint-gc))
        (defvar cl-struct-epaint-gc (quote epaint-gc)))))



  (use-package leetcode
    :load-path (lambda () (expand-file-name "site-elisp/leetcode.el" user-emacs-directory))
    :commands (leetcode)
    :init
    (use-package graphql :defer t)
    (use-package aio :defer t)
    :custom
    (url-debug t)
    (leetcode-prefer-language "python3"))


#+end_src

** Groovy
Groovy language settings
#+begin_src emacs-lisp

  ;; Jenkins
  (use-package jenkins)
  ;; groovy-mode

  (use-package groovy-mode)
  (setq-default groovy-mode 1)
  ;; enable when working on jenkins shared lib
  ;;  (add-hook 'groovy-mode-hook 'git-auto-commit-mode)
  (add-to-list 'lsp-enabled-clients 'groovy-ls)
  (setq lsp-groovy-server-file "~/groovy-language-server/groovy-language-server-all.jar")
  (add-hook 'groovy-mode-hook #'lsp-deferred)
  ;; (add-hook 'groovy-mode-hook #'lsp-groovy-enable)

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; Git autocommit used for groovy
  (use-package git-auto-commit-mode)


#+end_src

** HTML
Web-mode for working with HTML

#+begin_src emacs-lisp


        ;;;; WEB
  (use-package web-mode
    :mode (("\\.tsx\\'"  . typescript-tsx-mode)
           ("\\.html\\'" . web-mode))
    :hook ((web-mode            . lsp-deferred)
           (typescript-tsx-mode . lsp-deferred))
    :bind (
           :map typescript-tsx-mode-map
           ("C-c C-M-f". sgml-skip-tag-forward)
           ("C-c C-M-b". sgml-skip-tag-backward)
           ("C-c C-f". sgml-skip-tag-forward)
           ("C-c C-b". sgml-skip-tag-backward)
           :map web-mode-map
           ("C-c C-M-f". sgml-skip-tag-forward)
           ("C-c C-M-b". sgml-skip-tag-backward)
           ("C-c C-f". sgml-skip-tag-forward)
           ("C-c C-b". sgml-skip-tag-backward)
           ("C-M-i" . completion-at-point)
           ("C-M-u" . web-mode-element-parent)
           ("C-M-d" . web-mode-element-child))
    :init
    (define-derived-mode typescript-tsx-mode typescript-mode "TypeScript-tsx")
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-auto-close-style 2))

  ;; Emmet Mode for HTML

  (use-package emmet-mode
    :hook ((js-jsx-mode typescript-mode) emmet-jsx-major-modes)
    :bind
    ("C-j" . emmet-expand-line)
    (:map emmet-mode-keymap
          ("M-}" . emmet-next-edit-point)
          ("M-{" . emmet-prev-edit-point))
    :config
    (defun my/emmet-expand-capf ()
      (let ((bounds (bounds-of-thing-at-point 'symbol))
            (tap (thing-at-point 'symbol)))
        (list (car bounds) (cdr bounds)
              ;; Just return the symbol at point to so completion will be possible
              ;; TODO Determine if there is a less hacky option
              (lambda (string pred action) (list (thing-at-point 'symbol)))
              ;; Annotate with what emmet expands to
              ;; TODO find a way for this to show since right now
              ;; corfu doesn't display this on a single completion
              :annotation-function (lambda (str) (emmet-transform str))
              ;; Don't try to complete with emmet if there is no possible
              ;; expansion
              :predicate (not (string= (emmet-transform tap)
                                       tap))
              ;; Expand Emmet Template On Match
              :exit-function (lambda (str status)
                               (when (eql status 'finished)
                                 (emmet-expand-line nil)))
              ;; Allow for other completions to follow
              :exlcusive 'no)))

    (defun emmet-setup-capf ()
      (setq-local completion-at-point-functions
                  (add-to-list 'completion-at-point-functions
                               'my/emmet-expand-capf
                               t)))
    (add-hook 'emmet-mode-hook 'emmet-setup-capf))


  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.

  (add-hook 'web-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  (add-hook 'emmet-mode-hook (lambda () (setq emmet-indentation 2))) ;; indent 2 spaces.
  (setq emmet-move-cursor-between-quotes t) ;; default nil
  (setq emmet-self-closing-tag-style " /") ;; default "/"

  (use-package skewer-mode)
  (add-hook 'js2-mode-hook 'skewer-mode)
  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)

  (add-hook 'web-mode-hook 'emmet-mode)
  (add-hook 'js2-mode-hook 'emmet-mode)

#+end_src

** HTML PHP
Html, php, etc
#+begin_src emacs-lisp


  ;; web-mode
  (add-to-list 'lsp-enabled-clients 'html-ls)
  (add-hook 'web-mode-hook
            (lambda ()
              (rainbow-mode)
              (setq web-mode-markup-indent-offset 2)))
  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "html-languageserver")
                    :major-modes '(web-mode)
                    :server-id 'html-ls))

#+end_src

** Java
Set Emacs as Java IDE
#+begin_src emacs-lisp

  (add-to-list 'lsp-enabled-clients 'jdtls)





  (use-package java-snippets)

  (setq c-basic-offset 4)


#+end_src

** Jinja
Jinja2 mode
#+begin_src emacs-lisp


  ;; jinja2 mode, https://github.com/paradoxxxzero/jinja2-mode
  (use-package jinja2-mode)


#+end_src

** Json
#+begin_src emacs-lisp


  ;; Json mode

  (use-package json-mode)

  ;;(require 'flycheck-swagger-tools)


#+end_src

** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode)

  (add-to-list 'lsp-enabled-clients 'kotlin-ls)
#+end_src

** Lisp
Emacs lisp or elisp programming
#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              ;; Use spaces, not tabs.
              (setq indent-tabs-mode nil)
              ;; Keep M-TAB for `completion-at-point'
              (define-key flyspell-mode-map "\M-\t" nil)
              ;; Pretty-print eval'd expressions.
              (define-key emacs-lisp-mode-map
                          "\C-x\C-e" 'pp-eval-last-sexp)
              ;; Recompile if .elc exists.
              ;; (add-hook (make-local-variable 'after-save-hook)
              ;;           (lambda ()
              ;;             (byte-force-recompile default-directory)))
              (define-key emacs-lisp-mode-map
                          "\r" 'reindent-then-newline-and-indent)))
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode) ;; Requires Ispell
#+end_src

** Lisp Language
List language
#+begin_src emacs-lisp

  (use-package sly
    :commands (sly sly-connect)
    :init
    (setq sly-symbol-completion-mode nil
          sly-default-lisp 'roswell
          ros-config (concat user-emacs-directory
                             "ros-conf.lisp")
          sly-lisp-implementations
          `((sbcl ("sbcl") :coding-system utf-8-unix)
            (abcl ("abcl") :coding-system utf-8-unix)
            (ecl ("ecl") :coding-system utf-8-unix)
            (roswell ("ros" "-Q" "-l" ,ros-config "run"))
            (qlot ("qlot" "exec" "ros" "-l" ,ros-config "run" "-S" ".")
                  :coding-system utf-8-unix))))

  ;; paredit you can manipulate text as a tree
  (use-package paredit)
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  ;; paredit eldoc

  (require 'eldoc) ; if not already loaded
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round)


  ;; Paredit SLIME
  (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  ;; Stop SLIME's REPL from grabbing DEL,
  ;; which is annoying when backspacing over a '('
  (defun override-slime-repl-bindings-with-paredit ()
    (define-key slime-repl-mode-map
                (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook 'override-slime-repl-bindings-with-paredit)
  ;; Paredit electric return

  (defvar electrify-return-match
    "[\]}\)\"]"
    "If this regexp matches the text after the cursor, do an \"electric\"
    return.")

  (defun electrify-return-if-match (arg)
    "If the text after the cursor matches `electrify-return-match' then
    open and indent an empty line between the cursor and the text.  Move the
    cursor to the new line."
    (interactive "P")
    (let ((case-fold-search nil))
      (if (looking-at electrify-return-match)
          (save-excursion (newline-and-indent)))
      (newline arg)
      (indent-according-to-mode)))
  ;; Using local-set-key in a mode-hook is a better idea.
  (global-set-key (kbd "RET") 'electrify-return-if-match)

  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (paredit-mode t)
              (turn-on-eldoc-mode)
              (eldoc-add-command
               'paredit-backward-delete
               'paredit-close-round)
              (local-set-key (kbd "RET") 'electrify-return-if-match)
              (eldoc-add-command 'electrify-return-if-match)
              (show-paren-mode t)))

  (defun paredit-barf-all-the-way-backward ()
    (interactive)
    (paredit-split-sexp)
    (paredit-backward-down)
    (paredit-splice-sexp))

  (defun paredit-barf-all-the-way-forward ()
    (interactive)
    (paredit-split-sexp)
    (paredit-forward-down)
    (paredit-splice-sexp)
    (if (eolp) (delete-horizontal-space)))

  (defun paredit-slurp-all-the-way-backward ()
    (interactive)
    (catch 'done
      (while (not (bobp))
        (save-excursion
          (paredit-backward-up)
          (if (eq (char-before) ?\()
              (throw 'done t)))
        (paredit-backward-slurp-sexp))))

  (defun paredit-slurp-all-the-way-forward ()
    (interactive)
    (catch 'done
      (while (not (eobp))
        (save-excursion
          (paredit-forward-up)
          (if (eq (char-after) ?\))
              (throw 'done t)))
        (paredit-forward-slurp-sexp))))

  (nconc paredit-commands
         '("Extreme Barfage & Slurpage"
           (("C-M-)")
            paredit-slurp-all-the-way-forward
            ("(foo (bar |baz) quux zot)"
             "(foo (bar |baz quux zot))")
            ("(a b ((c| d)) e f)"
             "(a b ((c| d)) e f)"))
           (("C-M-}" "M-F")
            paredit-barf-all-the-way-forward
            ("(foo (bar |baz quux) zot)"
             "(foo (bar|) baz quux zot)"))
           (("C-M-(")
            paredit-slurp-all-the-way-backward
            ("(foo bar (baz| quux) zot)"
             "((foo bar baz| quux) zot)")
            ("(a b ((c| d)) e f)"
             "(a b ((c| d)) e f)"))
           (("C-M-{" "M-B")
            paredit-barf-all-the-way-backward
            ("(foo (bar baz |quux) zot)"
             "(foo bar baz (|quux) zot)"))))

  (paredit-define-keys)
  (paredit-annotate-mode-with-examples)
  (paredit-annotate-functions-with-examples)

  ;; FIXME Mishandles adjoining whole-line comments (reinserts preceding at end)
  (defun paredit-delete-indentation (&optional arg)
    "Handle joining lines that end in a comment."
    (interactive "*P")
    (let (comt)
      (save-excursion
        (move-beginning-of-line (if arg 1 0))
        ;; FIXME This misidentifies a semicolon inside a string as a comment
        ;; in lisp
        (when (skip-syntax-forward "^<" (point-at-eol))
          (setq comt (delete-and-extract-region (point) (point-at-eol)))))
      (delete-indentation arg)
      (when comt
        (save-excursion
          (move-end-of-line 1)
          (insert " ")
          (insert comt)))))
  (define-key paredit-mode-map (kbd "M-^") 'paredit-delete-indentation)

  (setq lispy-mode-hooks
        '(clojure-mode-hook
          emacs-lisp-mode-hook
          lisp-mode-hook
          scheme-mode-hook))

  (dolist (hook lispy-mode-hooks)
    (add-hook hook (lambda ()
                     (setq show-paren-style 'expression)
                     (paredit-mode)
                     (rainbow-delimiters-mode))))


#+end_src

** Markdown
Settings for handling markdown files

#+begin_src emacs-lisp


  ;; markdown-mode

  (use-package markdown-mode
    :commands markdown-mode
    :ensure-system-package (markdown pandoc)
    :init
    (add-hook 'markdown-mode-hook #'visual-line-mode)
    (add-hook 'markdown-mode-hook #'variable-pitch-mode)
    (add-hook 'markdown-mode-hook #'flyspell-mode)
    :config


    ;; The default command for markdown (~markdown~), doesn't support tables
    ;; (e.g. GitHub flavored markdown). Pandoc does, so let's use that.
    (setq markdown-command "pandoc --from markdown --to html")
    (setq markdown-command-needs-filename t)
    (custom-set-faces
     '(markdown-code-face ((t nil)))))


#+end_src

** Project management

Use Projectile to handle interaction with projects

#+begin_src emacs-lisp


  ;; projectile
  (use-package projectile
    :bind
    ("C-c v" . projectile-ag)

    :config
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

    (setq projectile-switch-project-action 'projectile-dired)
    (setq projectile-require-project-root nil)
    (setq projectile-completion-system 'ivy))
  (projectile-mode +1)

  ;; treemacs

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay      0.5
            treemacs-directory-name-transformer    #'identity
            treemacs-display-in-side-window        t
            treemacs-eldoc-display                 t
            treemacs-file-event-delay              5000
            treemacs-file-extension-regex          treemacs-last-period-regex-value
            treemacs-file-follow-delay             0.2
            treemacs-file-name-transformer         #'identity
            treemacs-follow-after-init             t
            treemacs-git-command-pipe              ""
            treemacs-goto-tag-strategy             'refetch-index
            treemacs-indentation                   2
            treemacs-indentation-string            " "
            treemacs-is-never-other-window         t
            treemacs-max-git-entries               5000
            treemacs-missing-project-action        'ask
            treemacs-move-forward-on-expand        nil
            treemacs-no-png-images                 nil
            treemacs-no-delete-other-windows       t
            treemacs-project-follow-cleanup        nil
            treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                      'left
            treemacs-recenter-distance             0.1
            treemacs-recenter-after-file-follow    nil
            treemacs-recenter-after-tag-follow     nil
            treemacs-recenter-after-project-jump   'always
            treemacs-recenter-after-project-expand 'on-distance
            treemacs-show-cursor                   nil
            treemacs-show-hidden-files             t
            treemacs-silent-filewatch              nil
            treemacs-silent-refresh                nil
            treemacs-sorting                       'alphabetic-asc
            treemacs-space-between-root-nodes      t
            treemacs-tag-follow-cleanup            t
            treemacs-tag-follow-delay              1.5
            treemacs-user-mode-line-format         nil
            treemacs-user-header-line-format       nil
            treemacs-width                         35
            treemacs-workspace-switch-cleanup      nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile
    :ensure t)

  (use-package treemacs-icons-dired
    :after treemacs dired
    :ensure t
    :config (treemacs-icons-dired-mode))

  (use-package treemacs-magit
    :after treemacs magit
    :ensure t)

  (use-package treemacs-persp ;;treemacs-persective if you use perspective.el vs. persp-mode
    :after treemacs persp-mode ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src

** Protobuf
Googles Protocol Buffer files. They are some what similar to JSON
#+begin_src emacs-lisp

  ;; protobuf
  (use-package protobuf-mode
    :ensure t
    :config
    (defconst my-protobuf-style
      '((c-basic-offset . 4)
        (indent-tabs-mode . nil)))
    (add-hook 'protobuf-mode-hook
              (lambda () (c-add-style "my-style" my-protobuf-style t))))


#+end_src

** Python
Cleanup needed
#+begin_src emacs-lisp

  (setq-default py-split-windows-on-execute-function 'split-window-horizontally)

  (setq python-indent-guess-indent-offset t)
  (setq python-indent-guess-indent-offset-verbose nil)
  ;; python

  (use-package python-mode
    :ensure nil
    :after flycheck
    :mode "\\.py\\'"
    :custom
    (python-indent-offset 4)
    (flycheck-python-pycompile-executable "python3")
    (python-shell-interpreter "python3"))


  (use-package lsp-pyright
    :hook (python-mode . (lambda () (require 'lsp-pyright)))
    :custom
    (lsp-pyright-multi-root nil))
  (add-to-list 'lsp-enabled-clients 'pylsp)

  (use-package py-autopep8)
  (require 'py-autopep8)
  (py-autopep8-mode)
  (add-hook 'python-mode-hook 'py-autopep8-mode)

  ;; to reformat your python buffer enable blacken-mode in relevant python buffers
  (use-package blacken)

  ;; Emacs Ipython Notebook
  (use-package ein
    :defer t
    :config
    (add-hook 'ein:notebook-mode-hook 'jedi:setup)
    (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)
    (setq ein:polymode t)
    (setq ein:use-auto-complete t)
    (setq ein:use-smartrep t)
    :custom
    (ein:completion-backend 'ein:use-ac-backend)
    (ein:completion-backend 'ein:ac-jedi-backend)
    ;; (ein:completion-backend 'ein:use-jedi-backend)
    (ein:completion-backend 'ein:use-company-backend)
    ;; (setq ein:polymode t)
    ;; (setq ein:use-auto-complete t)
    ;; (setq ein:use-smartrep t)
    ;; (add-hook 'find-file-hook 'ein:maybe-open-file-as-notebook)
    (ein:completion-backend 'ein:use-ac-backend)
    (ein:complete-on-dot t)
    (ein:truncate-long-cell-output t)
    (ein:auto-save-on-execute t)
    ;; (ein:auto-black-on-execute t)
    (ein:output-area-inlined-images t) ;; not necessary in older versions
    (ein:slice-image t))

  ;; Try ein and decide if this is needed
  ;; (use-package jupyter)

  ;; Use IPython for REPL
  (setq python-shell-completion-native-enable nil)
  ;; (setq python-shell-interpreter "jupyter-notebook"
  ;;      python-shell-interpreter-args "console"
  ;;      python-shell-prompt-detect-failure-warning nil)



  (use-package eldoc
    :defer 10
    :init
    (setq eldoc-echo-area-display-truncation-message t)
    (setq eldoc-echo-area-use-multiline-p nil)
    (global-eldoc-mode t))
#+end_src

** React Nodejs Javascript
Nodejs & React stuff
#+begin_src emacs-lisp
  (add-to-list 'lsp-enabled-clients 'ts-ls)
  (add-to-list 'lsp-language-id-configuration '(js2-mode . "javascript"))

  (use-package instant-rename-tag
    :load-path (lambda () (expand-file-name "site-elisp/instant-rename-tag" user-emacs-directory))
    :bind ("C-x <" . instant-rename-tag))
  (use-package js-import)
  (use-package js2-refactor)
  (require 'js2-refactor)
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (setq js2-skip-preprocessor-directives t)
  (js2r-add-keybindings-with-prefix "C-c C-m")
  ;; eg. extract function with `C-c C-m ef`.

  (use-package add-node-modules-path
    :defer t
    :hook (((js2-mode rjsx-mode) . add-node-modules-path)))


  (use-package prettier-js
    :defer t
    :diminish prettier-js-mode
    :hook (((js2-mode rjsx-mode) . prettier-js-mode))
    :init
    )


  ;; Javascript and coffeescript
  (use-package coffee-mode)
  (add-hook 'coffee-mode-hook
            (lambda ()
              (yas-minor-mode 1)
              (setq coffee-tab-width 2)))

  (defun setup-local-standard ()
    "If standard found in node_modules directory - use that for flycheck.
            Copied from: http://www.cyrusinnovation.com/initial-emacs-setup-for-reactreactnative/"
    (interactive)
    (let ((local-standard (expand-file-name "./node_modules/.bin/standard")))
      (setq flycheck-javascript-standard-executable
            (and (file-exists-p local-standard) local-standard))))

  ;; Tern is a JavaScript analyzer
  (defun setup-local-tern ()
    "If tern found in node_modules directory - use that for tern mode."
    (interactive)
    (let ((local-tern (expand-file-name "./node_modules/.bin/tern")))
      (message local-tern)
      (and (file-exists-p local-tern)
           (defvar tern-command (list local-tern))
           (tern-mode t))))


  ;; js2-mode for javascript
  (use-package js2-mode)
  (use-package js2-refactor)
  (require 'js2-refactor)
  (add-hook 'js2-mode-hook #'js2-refactor-mode)
  (add-hook 'js-mode-hook 'js2-minor-mode)
  (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx?\\'" . js2-jsx-mode))
  (add-to-list 'interpreter-mode-alist '("node" . js2-jsx-mode))
  (add-to-list 'auto-mode-alist '("\\.js\\'"    . js2-mode))
  (setq js2-indent-level 2)

  ;; TypeScript use tide
  (use-package tide
    :ensure t
    :after (typescript-mode flycheck)
    :hook ((typescript-mode . tide-setup)
           (typescript-mode . tide-hl-identifier-mode)
           (before-save . tide-format-before-save)))
  ;; aligns annotation to the right hand side
  (setq tide-completion-ignore-case t)

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))


  (add-hook 'js2-mode-hook #'setup-tide-mode)
  (add-hook 'rjsx-mode-hook #'setup-tide-mode)

  (setq tide-format-options
        '(:indentSize 2 :tabSize 2))
  ;; TSX

  (require 'web-mode)
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "tsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; enable typescript-tslint checker
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  (flycheck-add-mode 'typescript-tslint 'js2-mode)
  ;; JSX
  (require 'web-mode)

  (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-equal "jsx" (file-name-extension buffer-file-name))
                (setup-tide-mode))))
  ;; configure jsx-tide checker to run after your default jsx checker
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  ;;(flycheck-add-next-checker 'javascript-eslint 'jsx-tide 'append)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)
  (add-hook 'typescript-mode-hook #'setup-tide-mode)

  ;; ternjs
  (use-package tern
    :ensure t)

  (use-package js-react-redux-yasnippets)
  (use-package react-snippets)

#+end_src

** RST (reStructured Text)
RST is a file format for textual data primarily used by Python
programming language community for technical documentation.  It's sort
of lightweight markup language

#+begin_src emacs-lisp


  ;; rst-mode
  (use-package rst
    :config
    (add-hook 'rst-mode-hook
              (lambda ()
                (local-set-key (kbd "C-M-h") 'backward-kill-word)
                (setq-local fill-column 80)
                (turn-on-auto-fill))))


#+end_src

** Rust
#+begin_src emacs-lisp

    ;;; Rust
  (use-package rust-mode    :ensure t :mode "\\.rs\\'"
    :init
    ;; scratchpad for rust
    (setq lsp-rust-clippy-preference "on")
    (use-package rust-playground
      :commands (rust-playground)
      :ensure t))

  (tree-sitter-require 'rust)
  (global-tree-sitter-mode)
  (add-hook 'rust-mode-hook #'tree-sitter-hl-mode)

#+end_src
_

** Search what to use rg/ag/grep?

Intelligent Search

#+begin_src emacs-lisp

  (use-package isearch
    :ensure nil
    :bind (("C-s"     . isearch-forward)
           ("M-s M-%" . isearch-query-replace)
           ("C-r"     . isearch-backward)
           (:map isearch-mode-map
                 ("M-w" . isearch-save-and-exit))
           (:map isearch-mode-map
                 ("M-/" . isearch-complete))
           (:repeat-map isearch-repeat-map
                        ("s" . isearch-repeat-forward)))
    :custom ((isearch-lazy-count t)
             (lazy-count-prefix-format nil)
             (lazy-count-suffix-format " [%s of %s]")
             (search-whitespace-regexp ".*?")
             (isearch-lazy-highlight t)
             (isearch-lax-whitespace t)
             (isearch-regexp-lax-whitespace nil))
    :config
    (defun isearch-save-and-exit ()
      "Exit search normally. and save the `search-string' on kill-ring."
      (interactive)
      (isearch-done)
      (isearch-clean-overlays)
      (kill-new isearch-string))

    ;; ;; Avoid typing - and _ during searches
    ;; (setq search-whitespace-regexp "(.|[-_ \t\n])+")

    ;; Place cursor at the start of the match similar to vim's t
    ;; C-g will return the cursor to it's orignal position
    (add-hook 'isearch-mode-end-hook 'my-goto-match-beginning)
    (defun my-goto-match-beginning ()
      (when (and isearch-forward isearch-other-end
                 (not isearch-mode-end-hook-quit))
        (goto-char isearch-other-end))))

  (use-package ffap
    :ensure nil
    :bind ("C-x f" . ffap)
    :custom (find-file-visit-truename t)
    :init
    ;; Save my spot when I jump to another file
    (advice-add 'ffap :before #'push-mark))
  ;; ripgrep
  (use-package rg
    :ensure-system-package (ripgrep aspell ispell))
  (require 'rg)
  (rg-enable-default-bindings)
  (setq rg-align-position-numbers t)
  (setq rg-align-line-number-field-length 3)
  (setq rg-align-column-number-field-length 3)
  (setq rg-align-line-column-separator "#")
  (setq rg-align-position-content-separator "|")
  (setq rg-command-line-flags '("--hidden"))
  (setq rg-default-alias-fallback '("everything"))
  (setq rg-custom-type-aliases '(("everything" . "*")))


  ;;; Workspace Like Workflow
  (use-package perspective
    :ensure t
    :bind-keymap
    ("C-c p" . perspective-map)
    :bind (:map perspective-map
                ("s" . persp-switch)
                ("C-l" . persp-state-load)
                ("B" . persp-switch-to-scratch-buffer))
    :config
    (persp-mode t))

  ;;; popup window managment
  (use-package popper
    :ensure t ; or :straight t
    :bind (("M-`"     . popper-toggle-latest)
           ("M-~"     . popper-cycle)
           ("C-x M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*Warnings\\*"
            "\\*xref\\*"
            "\\*Backtrace\\*"
            "*Flymake diagnostics.*"
            "\\*eldoc\\*"
            "\\*compilation\\*"
            "\\*rustic-"
            "^*tex"
            "\\*Ement Notifications\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*Dtache Shell Command\\*"
            "\\*mu4e-update\\*"
            "\\*GDB.*out\\*"
            help-mode
            compilation-mode))
    (setq popper-display-control 'user)
    (popper-mode +1))

  (use-package multiple-cursors
    :bind (("C-M-'" . mc/edit-lines)
           ("C-M-|" . mc/mark-all-in-region-regexp)
           ;; Call with a 0 arg to skip one
           ("C-M-." . mc/mark-next-like-this)
           ("C-M-," . mc/mark-previous-like-this))
    :config
    ;; Use phi-search to replace isearch when using multiple cursors
    (use-package phi-search
      :bind (:map mc/keymap
                  ("C-s" . phi-search)
                  ("C-r" . phi-search-backward)
                  ("C-w" . kill-region)
                  ("C-w" . kill-region)))
    (defun toggle-corfu-auto-for-mc (&optional arg)
      (if multiple-cursors-mode
          (corfu-mode -1)
        (corfu-mode 1)))
    (cl-pushnew 'toggle-corfu-auto-for-mc multiple-cursors-mode-hook))



#+end_src

** SQL
#+begin_src emacs-lisp

  (use-package sqlformat
    :commands (sqlformat sqlformat-buffer sqlformat-region)
    :hook (sql-mode . sqlformat-on-save-mode)
    :init
    (setq sqlformat-command 'pg_format
          sqlformat-args '("-s2" "-g" "-u2")))
  (add-hook 'sql-mode-hook 'sqlup-mode)

  (use-package sqlup-mode)
  (add-hook 'sql-mode-hook 'lsp)
  (setq lsp-sqls-workspace-config-path nil)
  (setq lsp-sqls-connections
        '(((driver . "mysql") (dataSourceName . "gattu:local@tcp(localhost:3306)/foo"))
          ((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=gattu password=alpha dbname=alpha sslmode=disable"))))
  (add-to-list 'lsp-enabled-clients 'sqls)


#+end_src
** Terminal
terminalchanges

#+begin_src emacs-lisp

  ;; Multi-term use multiple terminal
  (use-package multi-term)
  (global-set-key (kbd "C-c t") 'multi-term)

  (defun hrs/term-paste (&optional string)
    "Paste STRING from clipboard."
    (interactive)
    (process-send-string
     (get-buffer-process (current-buf))
     (if string string (current-kill 0))))

  (add-hook 'term-mode-hook
            (lambda ()
              (goto-address-mode)
              (define-key term-raw-map (kbd "C-y") 'hrs/term-paste)
              (define-key term-raw-map (kbd "<mouse-2>") 'hrs/term-paste)
              (define-key term-raw-map (kbd "M-o") 'other-window)
              (setq yas-dont-activate t)))

  (cond
   ((string-equal system-type "windows-nt")
    (setq multi-term-program "c/Windows/System32/WindowsPowerShell/v1.g0/powershell.exe"))   ;; use powershell
   ((string-equal system-type "ms-dos")
    (setq multi-term-program "c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe"))
   ((string-equal system-type "darwin")
    (setq multi-term-program "/bin/bash"))
   ((string-equal system-type "gnu/linux")
    (setq multi-term-program "/bin/bash")));; use bash

  (autoload 'multi-term "multi-term" nil t)
  (autoload 'multi-term-next "multi-term" nil t)

  ;; only needed if you use autopair
  (add-hook 'term-mode-hook
            #'(lambda () (setq autopair-dont-activate t)))

  (global-set-key (kbd "C-c t") 'multi-term-next)
  (global-set-key (kbd "C-c T") 'multi-term) ;; create a new one


#+end_src

** Terraform
Terraform uses DSL.

#+begin_src emacs-lisp


  ;; Terraform mode

  (use-package terraform-mode)
  (custom-set-variables
   '(terraform-indent-level 4))


#+end_src

** Yaml

All YAML related config including AWS cloudformation, k8, & ansible.

#+begin_src emacs-lisp
  (require 'lsp-mode)

  (add-to-list 'lsp-enabled-clients 'yamlls)

  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection
                                     (lambda ()
                                       `(,(or (executable-find (cl-first lsp-yaml-server-command))
                                              (lsp-package-path 'yaml-language-server))
                                         ,@(cl-rest lsp-yaml-server-command))))
                    :major-modes '(cfn-yaml-mode docker-compose-mode dockerfile-mode )
                    :priority 1
                    :server-id 'yamlls))


  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection "erlang_ls -t stdio")
                    :major-modes '(erlang-mode)
                    :server-id 'erlang-ls))

  (add-to-list 'lsp-language-id-configuration '(cfn-yaml-mode . "spring-boot-properties-yaml"))
  (add-to-list 'lsp-language-id-configuration '(docker-compose-mode . "spring-boot-properties-yaml"))

  (use-package yaml-mode
    :ensure t
    :config
    (add-hook 'yaml-mode-hook
              'highlight-indent-guides-mode
              '(lambda ()
                 (define-key yaml-mode-map "\C-c m" 'newline-and-indent)))
    (add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)

    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode)))

  (use-package k8s-mode
    :ensure t
    :config
    (setq k8s-search-documentation-browser-function 'browse-url-firefox)
    :hook (k8s-mode . yas-minor-mode))

  ;; AWS Cloudformation linter cfn-linter
  ;; Set up a mode for YAML based templates if yaml-mode is installed
  ;; Get yaml-mode here https://github.com/yoshiki/yaml-mode
  (when (featurep 'yaml-mode)

    (define-derived-mode cfn-yaml-mode yaml-mode
      "CFN-YAML"
      "Simple mode to edit CloudFormation template in YAML format.")

    (add-to-list 'magic-mode-alist
                 '("\\(---\n\\)?AWSTemplateFormatVersion:" . cfn-yaml-mode)))

  ;; Set up cfn-lint integration if flycheck is installed
  ;; Get flycheck here https://www.flycheck.org/
  (when (featurep 'flycheck)
    (flycheck-define-checker cfn-lint
      "AWS CloudFormation linter using cfn-lint.

           Install cfn-lint first: pip install cfn-lint

           See `https://github.com/aws-cloudformation/cfn-python-lint'."

      :ensure-system-package (cfn-lint)
      :command ("cfn-lint" "-f" "parseable" source)
      :error-patterns ((warning line-start (file-name) ":" line ":" column
                                ":" (one-or-more digit) ":" (one-or-more digit) ":"
                                (id "W" (one-or-more digit)) ":" (message) line-end)
                       (error line-start (file-name) ":" line ":" column
                              ":" (one-or-more digit) ":" (one-or-more digit) ":"
                              (id "E" (one-or-more digit)) ":" (message) line-end))
      :modes (cfn-json-mode cfn-yaml-mode))

    (add-to-list 'flycheck-checkers 'cfn-lint)
    (add-hook 'cfn-json-mode-hook 'flycheck-mode)
    (add-hook 'cfn-yaml-mode-hook 'flycheck-mode))

  (use-package aws-snippets)

  ;; Ansible minor mode

  (use-package ansible)
  (add-hook 'yaml-mode-hook #'(lambda () (ansible 1)))

  (setq openapi-yaml-use-yaml-mode-syntax-highlight t)

#+end_src

* OrgMode
Settings for OrgMode

#+begin_src emacs-lisp

  ;; Encryption using epa https://orgmode.org/worg/org-tutorials/encrypting-files.html

  (epa-file-enable)

            ;;;; Better Looking Bullets
  (use-package org-modern
    :hook ((org-mode                 . org-modern-mode)
           (org-agenda-finalize-hook . org-modern-agenda))
    :custom ((org-modern-todo t)
             (org-modern-table nil)
             (org-modern-variable-pitch nil)
             (org-modern-block-fringe nil))
    :commands (org-modern-mode org-modern-agenda)
    :init (global-org-modern-mode))

  ;; Org Presentations using org-tree-slide

  (use-package org-tree-slide
    :custom
    (org-image-actual-width nil))

  ;; knowledge management with org-roam
  (setq find-file-visit-truename t)
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename
                         (concat (file-name-as-directory path-home-dir)
                                 "Documents/")))
    :bind (("\C-c n l" . org-roam-buffer-toggle)
           ("\C-c n f" . org-roam-node-find)
           ("\C-c n g" . org-roam-graph)
           ("\C-c n i" . org-roam-node-insert)
           ("\C-c n c" . org-roam-capture)
           ;; Dailies
           ("\C-c n j" . org-roam-dailies-capture-today))
    :config
    (org-roam-setup)

    ;; If using org-roam-protocol
    (require 'org-roam-protocol))
  ;; (setq org-roam-directory (file-truename "~/Documents/"))
  (setq org-roam-dailies-directory "daily/")

  (setq org-roam-dailies-capture-templates
        '(("d" "default" entry
           "* %?"
           :if-new (file+head "%<%Y-%m-%d>.org"
                              "#+title: %<%Y-%m-%d>\n"))))

  (setq org-capture-templates
        '(("t" "todo" plain (file buffer-name)
           "* TODO %?\n%U\n" :clock-in t :clock-resume t)

          ("j" "Journal entry" plain
           (file+olp+datetree "~/Documents/org-roam/journal.org")
           "%K - %a\n%i\n%?\n"
           :unnarrowed t)

          ("o" "o3" entry
           (file+olp+datetree buffer-name)
           (file "~/project/emacs/org/capture_templates/o3.org"))))


  (setq org-roam-v2-ack t)
  (setq org-roam-db-update-method 'immediate)

  (setq org-roam-completion-system 'ivy)

  ;; (use-package org-bullets
  ;; :init
  ;; (add-hook 'org-mode-hook 'org-bullets-mode))


  ;; org-bars
  (quelpa '(org-bars :fetcher github
                     :repo  "tonyaldon/org-bars"
                     :files ("*")))

  ;; org-present used for presentations
  (use-package org-present)

  (autoload 'org-present "org-present" nil t)

  (eval-after-load "org-present"
    '(progn
       (add-hook 'org-present-mode-hook
                 (lambda ()
                   (org-present-big)
                   (org-display-inline-images)
                   (org-present-hide-cursor)
                   (org-present-read-only)))
       (add-hook 'org-present-mode-quit-hook
                 (lambda ()
                   (org-present-small)
                   (org-remove-inline-images)
                   (org-present-show-cursor)
                   (org-present-read-write)))))

  (require 'org-bars)
  (add-hook 'org-mode-hook #'org-bars-mode)

  ;; Confluence exporter download from
  ;; https://github.com/aspiers/orgmode/blob/master/contrib/lisp/ox-confluence.el
  ;; and put it in ~/.emacs.d/

  (use-package ox-confluence
    :defer 3
    :ensure nil
    :after org)

  (use-package ox-gfm :defer t)
  (setq org-jira-custom-jqls
        '(
          ;; (:jql "project=\"ConnectWise DevOps\" AND status not in (Resolved, Closed) ORDER BY created DESC"
          ;; :startIndex
          ;; :limit 10
          ;; :filename "cw_cd")
          ))

  (use-package org-jira)

  (setq initial-major-mode 'org-mode)
  (setq org-ellipsis "⤵")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)

  (setq org-adapt-indentation nil)

  (setq org-directory (concat (file-name-as-directory path-home-dir)
                              "Documents/"))

  (setq org-log-done 'time)

  ;; org-mode
  (use-package org-contrib)

  ;; (use-package ob-ipython)

  (use-package org
    :config
    (require 'org-tempo)
    (add-hook 'org-mode-hook
              #'(lambda ()
                  (setq mailcap-mime-data '())
                  (mailcap-parse-mailcap "~/.mailcap")
                  (setq org-file-apps
                        '((remote . emacs)
                          ("mobi" . "fbreader %s")
                          (system . mailcap)
                          ("org" . emacs)
                          (t . mailcap))))))
  (use-package org-timeline
    :commands org-agenda
    :init
    (add-hook 'org-agenda-finalize-hook 'org-timeline-insert-timeline :append))

    ;;;; Drag And Drop
  (use-package org-download
    :bind ("C-c i" . org-download-screenshot)
    :hook ((org-mode dired-mode) . org-download-enable)
    :init
    (setq-default org-download-screenshot-method "gnome-screenshot -a -f %s")
    (setq-default org-download-image-dir "./pic"))

    ;;;; Templates
  (use-package org-tempo
    :ensure nil
    :after org
    :config
    (let ((templates '(("sh"  . "src sh")
                       ("el"  . "src emacs-lisp")
                       ("vim" . "src vim")
                       ("cpp" . "src C++ :includes <iostream>  :namespaces std"))))
      (dolist (template templates)
        (push template org-structure-template-alist))))

  (use-package nov)
  (use-package djvu)
  (use-package org-noter
    :after (pdf-tools)
    :init
    (setq org-noter-notes-search-path '("~/Documents/")))

  (use-package org-transclusion
    :after org
    :bind ("C-c t" . org-transclusion-add))

  (use-package org-protocol :ensure nil :after org)

  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)

  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)

  ;; exporters for markdown and beamer format

  (use-package ox-md
    :ensure nil
    :defer 3
    :after org)

  (use-package ox-beamer
    :ensure nil
    :defer 3
    :after org)
  (setq org-enforce-todo-dependencies t)
  (setq org-enforce-todo-checkbox-dependencies t)

  (defvar org-agenda-start-on-weekday nil)

  (defun org-file-path (filename)
    "Return the absolute address of an org FILENAME, given its relative name."
    (concat (file-name-as-directory org-directory) filename))

  (setq org-archive-location
        (concat (org-file-path "archive.org") "::* From %s"))


  (setq org-agenda-sorting-strategy '(habit-down category-up))
  (setq org-agenda-files
        (seq-filter (lambda(x) (not (string-match "/org/"(file-name-directory x))))
                    (directory-files-recursively "~/Documents/" "\\.org$")
                    ))

  ;; setup todo keywords
  (setq
   org-todo-keywords
   '((sequence "TODO(t)" "|" "DONE(d!)")
     (sequence "WAITING(w@/!)"
               "HOLD(h@/!)"
               "|"
               "CANCELLED(c@/!)"
               "MEETING"))
   org-use-fast-todo-selection t
   ;; block parent until children are done
   org-enforce-todo-dependencies t
   ;; allo to fast fix todo state without triggering anything
   org-treat-S-cursor-todo-selection-as-state-change nil
   ;; setup state triggers
   org-todo-state-tags-triggers
   '(("CANCELLED" ("CANCELLED" . t))
     ("WAITING" ("WAITING" . t))
     ("HOLD" ("WAITING") ("HOLD" . t))
     (done ("WAITING") ("HOLD") ("FOCUS"))
     ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
     ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))
   ;; use drawer for state changes
   org-log-into-drawer t)

  ;; tags
  (setq
   org-tag-persistent-alist '(("FOCUS" . ?f)
                              ("PROJECT" . ?p))
   org-use-tag-inheritance t
   org-tags-exclude-from-inheritance '("project"
                                       "litnotes"
                                       "people"))


                                           ;;;; https://d12frosted.io/posts/2020-06-25-task-management-with-roam-vol3.html
  (defun hrs/mark-done-and-archive ()
    "Mark the state of an `org-mode' item as DONE and archive it."
    (interactive)
    (org-todo 'done)
    (org-archive-subtree))

  (require 'org-habit)

  (defun org-habit-build-graph (habit starting current ending)
    "Build graph with HABIT STARTING CURRENT ENDING.")
  (setq org-habit-graph-column 60)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby . t)
     (dot . t)
     (python . t)
     ;; (ipython . t)
     (plantuml . t)
     (gnuplot . t)))

  (setq org-confirm-babel-evaluate nil)
  (use-package htmlize)

  (use-package graphviz-dot-mode)
  (add-to-list 'org-src-lang-modes '("dot" . graphviz-dot))

  (setq org-export-with-smart-quotes t)

  (setq org-html-postamble nil)

  (setq browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "/Applications/Safari.app/Contents/MacOS/Safari")

  (setenv "BROWSER" "/Applications/Safari.app/Contents/MacOS/Safari")
  ;; Uses more memory; see https://github.com/politza/pdf-tools/issues/51


  (use-package pdf-tools
    :config
    (custom-set-variables
     '(pdf-tools-handle-upgrades t)))
  (setq pdf-view-midnight-colors '("#f8f8f2" . "#282a36"))
  ;; (pdf-view-midnight-minor-mode)

  (pdf-tools-install)
  (pdf-loader-install)

  (setq pdf-view-use-scaling t
        pdf-view-use-imagemagick nil)
  (setq org-latex-pdf-process
        '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (defvar TeX-parse-self t)
  (defvar TeX-PDF-mode t)

  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (LaTeX-math-mode)
              (defvar TeX-master t)))

  (add-hook 'git-commit-mode-hook 'orgtbl-mode)
  (add-hook 'markdown-mode-hook 'orgtbl-mode)
  (add-hook 'message-mode-hook 'orgtbl-mode)

  ;; Provides support for list types like checkbox, bullets & counter cookies
  (use-package orgalist
    :config
    (add-hook 'git-commit-mode-hook 'orgalist-mode)
    (add-hook 'markdown-mode-hook 'orgalist-mode)
    (add-hook 'message-mode-hook 'orgalist-mode))

  ;; Plantuml a major mode for generating sequence and UML diagram using
  ;; text. https://plantuml.com


  (use-package plantuml-mode
    :defer t
    :custom
    (org-plantuml-jar-path (expand-file-name "/opt/homebrew/Cellar/plantuml/1.2022.6/libexec/plantuml.jar"))
    :config)

  (setq plantuml-default-exec-mode 'jar)



  ;; Enable plantuml-mode for PlantUML files
  (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

  ;; org mode end


#+end_src
* EAF browsers
#+begin_src emacs-lisp :tangle yes
  ;;; Extras
  (use-package quelpa-use-package)
  ;; Don't forget to run M-x eaf-install-dependencies
  (use-package eaf
    :unless my/is-termux
    :bind (("C-c w" . my/bm)
           ("s-w" . my/bm))
    ;; :demand t
    ;; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
    :load-path "~/.emacs.d/site-lisp/emacs-application-framework/"
    :init
    (use-package epc      :defer t :ensure t)
    (use-package ctable   :defer t :ensure t)
    (use-package deferred :defer t :ensure t)
    (use-package s        :defer t :ensure t)
    ;; (setq browse-url-browser-function 'eaf-open-browser)
    :config
    (defun slurp (f)
      (with-temp-buffer
        (insert-file-contents f)
        (buffer-substring-no-properties
         (point-min)
         (point-max))))
    (defun my/bm ()
      (interactive)
      (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/app/browser/")
      (require 'eaf-browser)

      (let ((selected (completing-read
                       "Select URL: " (split-string
                                       (slurp "~/.config/bookmarks") "\n" t))))
        (let ((url (car (split-string
                         selected
                         " " t))))
          (if (string-match-p "\\http.*\\'" url)
              ;; Open selected url
              (eaf-open-browser url)
            ;; Search entered text
            (eaf-search-it selected)))))
    (setq eaf-browser-continue-where-left-off t)
    (setq eaf-browser-dnefault-search-engine "duckduckgo")
    (setq eaf-browser-enable-adblocker "true")
    ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    ;; (dolist (keys '("i" "h" "j" "k" "l"
    ;;              "d" "f" "x" ","
    ;;              "-" "." "0" "1"
    ;;              "2" "=" "B" "F"
    ;;              "G" "H" "I" "J"
    ;;              "K" "L" "P" "T"
    ;;              "Y" "c" "d" "e"
    ;;              "f" "g" "m" "n"
    ;;              "o" "p" "r" "t"
    ;;              "u" "v" "x" "y"
    ;;              (eaf-bind-key nil key eaf-browser-keybinding))))
    )
#+end_src
* Prose Writing
Mode for writing books
#+begin_src emacs-lisp

  ;; Proselint

  (defvar prose-modes
    '(gfm-mode
      git-commit-mode
      markdown-mode
      message-mode
      mu4e-compose-mode
      org-mode
      text-mode))

  (defvar prose-mode-hooks
    (mapcar (lambda (mode) (intern (format "%s-hook" mode)))
            prose-modes))

  (require 'flycheck)

  (flycheck-def-executable-var proselint "proselint")
  (flycheck-define-command-checker 'proselint
    "A linter for prose."
    :command '("proselint" source-inplace)
    :error-patterns
    '((warning line-start (file-name) ":" line ":" column ": "
               (id (one-or-more (not (any " "))))
               (message (one-or-more not-newline)
                        (zero-or-more "\n" (any " ") (one-or-more not-newline)))
               line-end))
    :modes prose-modes
    :next-checkers 'nil
    :standard-input 'nil
    :working-directory 'nil)

  (add-to-list 'flycheck-checkers 'proselint)

  (dolist (hook prose-mode-hooks)
    (add-hook hook 'flycheck-mode))

#+end_src

* Navigation

#+begin_src emacs-lisp


  ;; then define packages you use
  (use-package ace-jump-mode
    :bind ("M-SPC" . ace-jump-mode))


  ;; avy
  (use-package avy
    :bind*
    ("C-;" . avy-goto-char-2))


#+end_src

* Experimental stuff
#+begin_src emacs-lisp


  (defvar xah-brackets '("“”" "()" "[]" "{}" "<>" "＜＞" "（）" "［］" "｛｝" "⦅⦆" "〚〛" "⦃⦄" "‹›" "«»" "「」" "〈〉" "《》" "【】" "〔〕" "⦗⦘" "『』" "〖〗" "〘〙" "｢｣" "⟦⟧" "⟨⟩" "⟪⟫" "⟮⟯" "⟬⟭" "⌈⌉" "⌊⌋" "⦇⦈" "⦉⦊" "❛❜" "❝❞" "❨❩" "❪❫" "❴❵" "❬❭" "❮❯" "❰❱" "❲❳" "〈〉" "⦑⦒" "⧼⧽" "﹙﹚" "﹛﹜" "﹝﹞" "⁽⁾" "₍₎" "⦋⦌" "⦍⦎" "⦏⦐" "⁅⁆" "⸢⸣" "⸤⸥" "⟅⟆" "⦓⦔" "⦕⦖" "⸦⸧" "⸨⸩" "｟｠")
    "A list of strings, each element is a string of 2 chars, the left bracket and a matching right bracket. Used by `xah-select-text-in-quote' and others.")

  (defconst xah-left-brackets
    (mapcar (lambda (x) (substring x 0 1)) xah-brackets)
    "List of left bracket chars. Each element is a string.")

  (defconst xah-right-brackets
    (mapcar (lambda (x) (substring x 1 2)) xah-brackets)
    "List of right bracket chars. Each element is a string.")

  (defun xah-backward-left-bracket ()
    "Move cursor to the previous occurrence of left bracket.
              The list of brackets to jump to is defined by `xah-left-brackets'.
              URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
              Version 2015-10-01"
    (interactive)
    (re-search-backward (regexp-opt xah-left-brackets) nil t))
  (global-set-key (kbd "C-c b") 'xah-backward-left-bracket)

  (defun xah-forward-right-bracket ()
    "Move cursor to the next occurrence of right bracket.
              The list of brackets to jump to is defined by `xah-right-brackets'.
              URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
              Version 2015-10-01"
    (interactive)
    (re-search-forward (regexp-opt xah-right-brackets) nil t))
  (global-set-key (kbd "C-c k") 'xah-forward-right-bracket)

  (defun xah-forward-quote-smart ()
    "Move cursor to the current or next string quote.
            Place cursor at the position after the left quote.
            Repeated call will find the next string.
            URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
            Version 2016-11-22"
    (interactive)
    (let (($pos (point)))
      (if (nth 3 (syntax-ppss))
          (progn
            (backward-up-list 1 'ESCAPE-STRINGS 'NO-SYNTAX-CROSSING)
            (forward-sexp)
            (re-search-forward "\\\"" nil t))
        (progn (re-search-forward "\\\"" nil t)))
      (when (<= (point) $pos)
        (progn (re-search-forward "\\\"" nil t)))))
  (global-set-key (kbd "C-c u") 'xah-forward-quote)
  (defun xah-backward-quote ()
    "Move cursor to the previous occurrence of \".
            If there are consecutive quotes of the same char, keep moving until none.
            Returns `t' if found, else `nil'.
            URL `http://xahlee.info/emacs/emacs/emacs_navigating_keys_for_brackets.html'
            Version 2016-07-23"
    (interactive)
    (if (re-search-backward "\\\"+" nil t)
        (when (char-before) ; isn't nil, at beginning of buffer
          (while (char-equal (char-before) (char-after))
            (left-char)
            t))
      (progn
        (message "No more quotes before cursor.")
        nil)))
  (global-set-key (kbd "C-c w") 'xah-backward-quote)



  (use-package ibuffer
    :ensure nil
    :bind ("C-x C-b" . ibuffer)
    :init
    (setq ibuffer-expert t)
    (setq ibuffer-show-empty-filter-groups nil)

    ;; Modify the default ibuffer-formats
    (setq ibuffer-formats
          '((mark modified read-only " "
                  (name 40 40 :left :elide)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process)))
    (setq ibuffer-saved-filter-groups
          '(("home"
             ("Windows" (and (mode . exwm-mode)
                             (not (name . "qutebrowser"))))
             ("Qutebrowser" (name . "qutebrowser"))
             ("Shells" (mode . shell-mode))
             ("emacs-config" (or (filename . ".emacs.d")
                                 (filename . "emacs-config")))

             ("Web Dev" (or (mode . html-mode)
                            (mode . css-mode)))
             ("Magit" (name . "\*magit"))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*")))
             ("Browser" (mode . eaf-mode))
             ("Ement" (name . "\*Ement *"))
             ("Org" (or (mode . org-mode)
                        (filename . "OrgMode"))))))
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-switch-to-saved-filter-groups "home"))))

  (quelpa '(s :fetcher github
              :repo  "magnars/s.el"
              :files ("*")))

  (add-to-list 'load-path "/Users/gattu/.emacs.d/site-lisp/")

  ;; A game to practice speed typing in emacs
  (use-package speed-type
    :commands (speed-type-text))

  ;; hacker news
  (use-package hackernews
    :commands (hackernews)
    :bind
    ("C-c m" . hackernews))


  ;; 2048 Game

  (use-package 2048-game
    :commands (2048-game))

  ;; Mongodb
  (use-package inf-mongo)
  (add-to-list 'load-path "~/.emacs.d/vendor/inf-mongo")
  (require 'inf-mongo)
  (defvar inf-mongo-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "C-x C-e")  'mongo-send-region)
      (define-key map (kbd "<M-up>")   'comint-previous-input)
      (define-key map (kbd "<M-down>") 'comint-next-input)
      map))

  ;; popup a frame at point
  (use-package posframe)

  ;; gnuplot is a command line driven graphing utility for linux
  (use-package gnuplot)


  ;; Ledger double entry accounting tools

  (use-package ledger-mode
    :ensure t
    :init
    (setq ledger-clear-whole-transactions 1)
    :mode "\\.dat\\'")

  (use-package emr)

  ;; sml-mode Standard ML a functional language
  (use-package sml-mode
    :ensure t)

  ;; elfeed
  (use-package elfeed
    :custom
    (elfeed-feeds
     '(
       ;;dev.to
       "http://dev.to/feed"

       ;;reddit
       "http://reddit.com/r/clojure/.rss"
       "http://reddit.com/r/cpp/.rss"
       "http://reddit.com/r/emacs/.rss"
       "http://reddit.com/r/golang/.rss"
       "http://reddit.com/r/rust/.rss"
       "http://reddit.com/r/bindingofisaac/.rss"

       ;;hackernews
       "https://news.ycombinator.com/rss"

       ;;other blogs
       "https://cestlaz.github.io/rss.xml"
       )))

  ;; Generic emacs stuff

  (defalias 'qrr 'query-regexp-replace)

  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(package-selected-packages
     (quote
      (protobuf-mode elixir-mode dockerfile-mode expand-region markdown-mode flycheck-gometalinter switch-window go-guru go-rename avy whole-line-or-region web-mode go-eldoc go-direx go-add-tags go-mode yaml-mode counsel projectile ivy ag gitignore-mode magit ace-jump-mode use-package))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

  (defun goto-last-heading ()
    (interactive)
    (org-end-of-subtree))

  ;; not sure about this
  (use-package let-alist)
  (use-package flycheck-package)
  (eval-after-load 'flycheck
    '(flycheck-package-setup))

#+end_src

** Dictionary Update
Using StarDict
#+begin_src emacs-lisp


  ;; Dictionary

  (defun hrs/dictionary-define-word ()
    "Define dictionary word."
    (interactive)
    (let* ((word (hrs/dictionary-prompt))
           (buffer-name (concat "Definition: " word)))
      (with-output-to-temp-buffer buffer-name
        (shell-command (format "sdcv -n %s" word) buffer-name))))

  (define-key global-map (kbd "C-x w") 'hrs/dictionary-define-word)


#+end_src

* Disabled
I probably don't need these

#+begin_src emacs-lisp


  ;; (use-package hydra
  ;;   :ensure t
  ;;   :config
  ;;   (require 'hydra)
  ;;   (require 'dap-mode)
  ;;   (require 'dap-ui)
  ;;   ;;:commands (ace-flyspell-setup)
  ;;   :bindp
  ;;   ;;("M-s" . hydra-go/body)
  ;;   :init
  ;;   (add-hook 'dap-stopped-hook
  ;;            (lambda (arg) (call-interactively #'hydra-go/body)))
  ;;   :hydra  (hydra-go (:color pink :hint nil :foreign-keys run)
  ;;                    "
  ;;    _n_: Next       _c_: Continue _g_: goroutines      _i_: break log
  ;;    _s_: Step in    _o_: Step out _k_: break condition _h_: break hit condition
  ;;    _Q_: Disconnect _q_: quit     _l_: locals
  ;;    "
  ;;                    ("n" dap-next)
  ;;                    ("c" dap-continue)
  ;;                    ("s" dap-step-in)
  ;;                    ("o" dap-step-out)
  ;;                    ("g" dap-ui-sessions)
  ;;                    ("l" dap-ui-locals)
  ;;                    ("e" dap-eval-thing-at-point)
  ;;                    ("h" dap-breakpoint-hit-condition)
  ;;                    ("k" dap-breakpoint-condition)
  ;;                    ("i" dap-breakpoint-log-message)
  ;;                    ("q" nil "quit" :color blue)
  ;;                    ("Q" dap-disconnect :color red)))

#+end_src

#+RESULTS:
